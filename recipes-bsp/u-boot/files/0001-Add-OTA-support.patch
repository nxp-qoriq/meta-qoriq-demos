From ad73cb1b18b046baa33193807263315a82f894b3 Mon Sep 17 00:00:00 2001
From: "mengkun.chen" <mengkun.chen@nxp.com>
Date: Tue, 27 Aug 2019 11:25:38 +0800
Subject: [PATCH] Add OTA support

Signed-off-by: mengkun.chen <mengkun.chen@nxp.com>
---
 board/freescale/ls1012ardb/ls1012ardb.c   | 62 +++++++++++++++++++++++++++++++
 board/freescale/ls1021atwr/ls1021atwr.c   | 62 +++++++++++++++++++++++++++++++
 board/freescale/ls1028a/ls1028a.c         | 61 ++++++++++++++++++++++++++++++
 board/freescale/ls1043ardb/ls1043ardb.c   | 59 +++++++++++++++++++++++++++++
 board/freescale/ls1046afrwy/ls1046afrwy.c | 60 ++++++++++++++++++++++++++++++
 board/freescale/ls1046ardb/ls1046ardb.c   | 60 ++++++++++++++++++++++++++++++
 board/freescale/ls1088a/ls1088a.c         | 62 +++++++++++++++++++++++++++++++
 board/freescale/ls2080ardb/ls2080ardb.c   | 61 ++++++++++++++++++++++++++++++
 board/freescale/lx2160a/lx2160a.c         | 61 ++++++++++++++++++++++++++++++
 configs/ls1012ardb_tfa_defconfig          |  1 +
 configs/ls1021atwr_nor_defconfig          |  1 +
 configs/ls1028ardb_tfa_defconfig          |  1 +
 configs/ls1043ardb_tfa_defconfig          |  1 +
 configs/ls1046afrwy_tfa_defconfig         |  1 +
 configs/ls1046ardb_tfa_defconfig          |  1 +
 configs/ls1088ardb_tfa_defconfig          |  1 +
 configs/ls2088ardb_tfa_defconfig          |  1 +
 configs/lx2160ardb_tfa_defconfig          |  1 +
 include/configs/ls1012ardb.h              |  1 +
 include/configs/ls1021atwr.h              |  1 +
 include/configs/ls1028ardb.h              |  1 +
 include/configs/ls1043ardb.h              |  1 +
 include/configs/ls1046afrwy.h             |  1 +
 include/configs/ls1046ardb.h              |  1 +
 include/configs/ls1088ardb.h              |  1 +
 include/configs/ls2080ardb.h              | 50 +++++++++++--------------
 include/configs/lx2160ardb.h              |  1 +
 27 files changed, 587 insertions(+), 28 deletions(-)

diff --git a/board/freescale/ls1012ardb/ls1012ardb.c b/board/freescale/ls1012ardb/ls1012ardb.c
index f648a90..624efce 100644
--- a/board/freescale/ls1012ardb/ls1012ardb.c
+++ b/board/freescale/ls1012ardb/ls1012ardb.c
@@ -166,6 +166,68 @@ int board_init(void)
 	return 0;
 }
 
+struct OTA_parameter
+{
+       char status;
+       char str[0x200 - 1];
+};
+
+int ota_sdboot_check(void)
+{
+       struct mmc *mmc;
+       uint blk_start, blk_cnt;
+       unsigned long offset, size;
+       struct OTA_parameter data;
+       int dev = 0;
+       char platform[10];
+
+       offset  = 0x3F00000;
+       size    = 0x200;
+       mmc = find_mmc_device(dev);
+       if(mmc == NULL)
+               return 0;
+       if (mmc_init(mmc))
+               return 0;
+       struct blk_desc *desc = mmc_get_blk_desc(mmc);
+       blk_start   = ALIGN(offset, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_cnt     = ALIGN(size, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_dread(desc, blk_start, blk_cnt, (uchar *)&data);
+
+       if( strstr(data.str, "ls1012a") == NULL ){
+               printf("sd card is not authenticated\n");
+               return 0;
+       }
+
+       printf("status=%c\n",data.status);
+       switch(data.status)
+       {
+               case '0':
+                       break;
+               case '1':
+                       data.status = '2';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       break;
+               case '2':
+                       data.status = '3';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       return 0;
+                       break;
+               default:
+                       return 0;
+                       break;
+       }
+       return 1;
+}
+
+int last_stage_init(void)
+{
+       if(ota_sdboot_check())
+               env_set("bootcmd","run sdboot");
+       /* enable watchdog and set timeout to 34s */
+       //writew( 0x3420, WDOG1_BASE_ADDR);
+       return 0;
+}
+
 #ifdef CONFIG_TARGET_LS1012ARDB
 int esdhc_status_fixup(void *blob, const char *compat)
 {
diff --git a/board/freescale/ls1021atwr/ls1021atwr.c b/board/freescale/ls1021atwr/ls1021atwr.c
index 01ba1bc..00015a0 100644
--- a/board/freescale/ls1021atwr/ls1021atwr.c
+++ b/board/freescale/ls1021atwr/ls1021atwr.c
@@ -89,6 +89,68 @@ struct cpld_data {
 	u8 rev2;		/* Reserved */
 };
 
+struct OTA_parameter
+{
+       char status;
+       char str[0x200 - 1];
+};
+
+int ota_sdboot_check(void)
+{
+       struct mmc *mmc;
+       uint blk_start, blk_cnt;
+       unsigned long offset, size;
+       struct OTA_parameter data;
+       int dev = 0;
+       char platform[10];
+
+       offset  = 0x3F00000;
+       size    = 0x200;
+       mmc = find_mmc_device(dev);
+       if(mmc == NULL)
+               return 0;
+       if (mmc_init(mmc))
+               return 0;
+       struct blk_desc *desc = mmc_get_blk_desc(mmc);
+       blk_start   = ALIGN(offset, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_cnt     = ALIGN(size, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_dread(desc, blk_start, blk_cnt, (uchar *)&data);
+
+       if( strstr(data.str, "ls1021a") == NULL ){
+               printf("sd card is not authenticated\n");
+               return 0;
+       }
+
+       printf("status=%c\n",data.status);
+       switch(data.status)
+       {
+               case '0':
+                       break;
+               case '1':
+                       data.status = '2';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       break;
+               case '2':
+                       data.status = '3';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       return 0;
+                       break;
+               default:
+                       return 0;
+                       break;
+       }
+       return 1;
+}
+
+int last_stage_init(void)
+{
+       if(ota_sdboot_check())
+               env_set("bootcmd","run sdboot");
+       /* enable watchdog and set timeout to 60s */
+       //writew( 0x3478, WDOG1_BASE_ADDR);
+       return 0;
+}
+
 #if !defined(CONFIG_QSPI_BOOT) && !defined(CONFIG_SD_BOOT_QSPI)
 static void cpld_show(void)
 {
diff --git a/board/freescale/ls1028a/ls1028a.c b/board/freescale/ls1028a/ls1028a.c
index 76d9161..068b146 100644
--- a/board/freescale/ls1028a/ls1028a.c
+++ b/board/freescale/ls1028a/ls1028a.c
@@ -10,6 +10,7 @@
 #include <asm/io.h>
 #include <hwconfig.h>
 #include <fdt_support.h>
+#include <mmc.h>
 #include <linux/libfdt.h>
 #include <environment.h>
 #include <asm/arch-fsl-layerscape/soc.h>
@@ -125,6 +126,66 @@ int board_early_init_f(void)
 	return 0;
 }
 
+struct OTA_parameter
+{
+       char status;
+       char str[0x200 - 1];
+};
+
+int ota_sdboot_check(void)
+{
+       struct mmc *mmc;
+       uint blk_start, blk_cnt;
+       unsigned long offset, size;
+       struct OTA_parameter data;
+       int dev = 0;
+       char platform[10];
+
+       offset  = 0x3F00000;
+       size    = 0x200;
+       mmc = find_mmc_device(dev);
+       if(mmc == NULL)
+               return 0;
+       if (mmc_init(mmc))
+               return 0;
+       struct blk_desc *desc = mmc_get_blk_desc(mmc);
+       blk_start   = ALIGN(offset, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_cnt     = ALIGN(size, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_dread(desc, blk_start, blk_cnt, (uchar *)&data);
+
+       if( strstr(data.str, "ls1028a") == NULL ){
+               printf("sd card is not authenticated\n");
+               return 0;
+       }
+
+       printf("status=%c\n",data.status);
+       switch(data.status)
+       {
+               case '0':
+                       break;
+               case '1':
+                       data.status = '2';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       break;
+               case '2':
+                       data.status = '3';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       return 0;
+                       break;
+               default:
+                       return 0;
+                       break;
+       }
+       return 1;
+}
+
+int last_stage_init(void)
+{
+    if(ota_sdboot_check())
+        env_set("bootcmd","qixis_reset sd");
+    return 0;
+}
+
 void detail_board_ddr_info(void)
 {
 	puts("\nDDR    ");
diff --git a/board/freescale/ls1043ardb/ls1043ardb.c b/board/freescale/ls1043ardb/ls1043ardb.c
index fbd9a26..8d403f8 100644
--- a/board/freescale/ls1043ardb/ls1043ardb.c
+++ b/board/freescale/ls1043ardb/ls1043ardb.c
@@ -184,6 +184,65 @@ int checkboard(void)
 	return 0;
 }
 
+struct OTA_parameter
+{
+       char status;
+       char str[0x200 - 1];
+};
+
+int ota_sdboot_check(void)
+{
+       struct mmc *mmc;
+       uint blk_start, blk_cnt;
+       unsigned long offset, size;
+       struct OTA_parameter data;
+       int dev = 0;
+       char platform[10];
+
+       offset  = 0x3F00000;
+       size    = 0x200;
+       mmc = find_mmc_device(dev);
+       if(mmc == NULL)
+               return 0;
+       if (mmc_init(mmc))
+               return 0;
+       struct blk_desc *desc = mmc_get_blk_desc(mmc);
+       blk_start   = ALIGN(offset, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_cnt     = ALIGN(size, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_dread(desc, blk_start, blk_cnt, (uchar *)&data);
+
+       if( strstr(data.str, "ls1043a") == NULL ){
+               printf("sd card is not authenticated\n");
+               return 0;
+       }
+       printf("status=%c\n",data.status);
+       switch(data.status)
+       {
+               case '0':
+                       break;
+               case '1':
+                       data.status = '2';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       break;
+               case '2':
+                       data.status = '3';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       return 0;
+                       break;
+               default:
+                       return 0;
+                       break;
+       }
+       return 1;
+}
+
+int last_stage_init(void)
+{
+       if(ota_sdboot_check())
+               env_set("bootcmd","cpld reset sd");
+	return 0;
+}
+
 int board_init(void)
 {
 	struct ccsr_scfg *scfg = (struct ccsr_scfg *)CONFIG_SYS_FSL_SCFG_ADDR;
diff --git a/board/freescale/ls1046afrwy/ls1046afrwy.c b/board/freescale/ls1046afrwy/ls1046afrwy.c
index ed64ac3..0de6121 100644
--- a/board/freescale/ls1046afrwy/ls1046afrwy.c
+++ b/board/freescale/ls1046afrwy/ls1046afrwy.c
@@ -156,6 +156,66 @@ val = (in_le32(SMMU_SCR0) | SCR0_CLIENTPD_MASK) & ~(SCR0_USFCFG_MASK);
 	return 0;
 }
 
+struct OTA_parameter
+{
+       char status;
+       char str[0x200 - 1];
+};
+
+int ota_sdboot_check(void)
+{
+       struct mmc *mmc;
+       uint blk_start, blk_cnt;
+       unsigned long offset, size;
+       struct OTA_parameter data;
+       int dev = 0;
+       char platform[10];
+
+       offset  = 0x3F00000;
+       size    = 0x200;
+       mmc = find_mmc_device(dev);
+       if(mmc == NULL)
+               return 0;
+       if (mmc_init(mmc))
+               return 0;
+       struct blk_desc *desc = mmc_get_blk_desc(mmc);
+       blk_start   = ALIGN(offset, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_cnt     = ALIGN(size, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_dread(desc, blk_start, blk_cnt, (uchar *)&data);
+
+       if( strstr(data.str, "ls1046a") == NULL ){
+               printf("sd card is not authenticated\n");
+               return 0;
+       }
+
+       printf("status=%c\n",data.status);
+       switch(data.status)
+       {
+               case '0':
+                       break;
+               case '1':
+                       data.status = '2';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       break;
+               case '2':
+                       data.status = '3';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       return 0;
+                       break;
+               default:
+                       return 0;
+                       break;
+       }
+       return 1;
+}
+
+int last_stage_init(void)
+{
+    if(ota_sdboot_check())
+        env_set("bootcmd","run sdboot");
+    return 0;
+}
+
 int board_setup_core_volt(u32 vdd)
 {
 	return 0;
diff --git a/board/freescale/ls1046ardb/ls1046ardb.c b/board/freescale/ls1046ardb/ls1046ardb.c
index 0a73fe8..1998f8a 100644
--- a/board/freescale/ls1046ardb/ls1046ardb.c
+++ b/board/freescale/ls1046ardb/ls1046ardb.c
@@ -97,6 +97,66 @@ int board_init(void)
 	return 0;
 }
 
+struct OTA_parameter
+{
+       char status;
+       char str[0x200 - 1];
+};
+
+int ota_sdboot_check(void)
+{
+       struct mmc *mmc;
+       uint blk_start, blk_cnt;
+       unsigned long offset, size;
+       struct OTA_parameter data;
+       int dev = 0;
+       char platform[10];
+
+       offset  = 0x3F00000;
+       size    = 0x200;
+       mmc = find_mmc_device(dev);
+       if(mmc == NULL)
+               return 0;
+       if (mmc_init(mmc))
+               return 0;
+       struct blk_desc *desc = mmc_get_blk_desc(mmc);
+       blk_start   = ALIGN(offset, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_cnt     = ALIGN(size, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_dread(desc, blk_start, blk_cnt, (uchar *)&data);
+
+       if( strstr(data.str, "ls1046a") == NULL ){
+               printf("sd card is not authenticated\n");
+               return 0;
+       }
+
+       printf("status=%c\n",data.status);
+       switch(data.status)
+       {
+               case '0':
+                       break;
+               case '1':
+                       data.status = '2';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       break;
+               case '2':
+                       data.status = '3';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       return 0;
+                       break;
+               default:
+                       return 0;
+                       break;
+       }
+       return 1;
+}
+
+int last_stage_init(void)
+{
+       if(ota_sdboot_check())
+               env_set("bootcmd","cpld reset sd");
+	return 0;
+}
+
 int board_setup_core_volt(u32 vdd)
 {
 	bool en_0v9;
diff --git a/board/freescale/ls1088a/ls1088a.c b/board/freescale/ls1088a/ls1088a.c
index 053421d..dbd2130 100644
--- a/board/freescale/ls1088a/ls1088a.c
+++ b/board/freescale/ls1088a/ls1088a.c
@@ -12,6 +12,7 @@
 #include <fsl_sec.h>
 #include <asm/io.h>
 #include <fdt_support.h>
+#include <mmc.h>
 #include <linux/libfdt.h>
 #include <fsl-mc/fsl_mc.h>
 #include <environment.h>
@@ -702,6 +703,67 @@ int set_serdes_volt(int svdd)
 	return 1;
 }
 #else
+
+struct OTA_parameter
+{
+       char status;
+       char str[0x200 - 1];
+};
+
+int ota_sdboot_check(void)
+{
+       struct mmc *mmc;
+       uint blk_start, blk_cnt;
+       unsigned long offset, size;
+       struct OTA_parameter data;
+       int dev = 0;
+       char platform[10];
+
+       offset  = 0x3F00000;
+       size    = 0x200;
+       mmc = find_mmc_device(dev);
+       if(mmc == NULL)
+               return 0;
+       if (mmc_init(mmc))
+               return 0;
+       struct blk_desc *desc = mmc_get_blk_desc(mmc);
+       blk_start   = ALIGN(offset, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_cnt     = ALIGN(size, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_dread(desc, blk_start, blk_cnt, (uchar *)&data);
+
+       if( strstr(data.str, "ls1088a") == NULL ){
+               printf("sd card is not authenticated\n");
+               return 0;
+       }
+
+       printf("status=%c\n",data.status);
+       switch(data.status)
+       {
+               case '0':
+                       break;
+               case '1':
+                       data.status = '2';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       break;
+               case '2':
+                       data.status = '3';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       return 0;
+                       break;
+               default:
+                       return 0;
+                       break;
+       }
+       return 1;
+}
+
+int last_stage_init(void)
+{
+    if(ota_sdboot_check())
+        env_set("bootcmd","qixis_reset sd");
+    return 0;
+}
+
 int get_serdes_volt(void)
 {
 	return 0;
diff --git a/board/freescale/ls2080ardb/ls2080ardb.c b/board/freescale/ls2080ardb/ls2080ardb.c
index a36e256..d8a70d7 100644
--- a/board/freescale/ls2080ardb/ls2080ardb.c
+++ b/board/freescale/ls2080ardb/ls2080ardb.c
@@ -12,6 +12,7 @@
 #include <asm/io.h>
 #include <hwconfig.h>
 #include <fdt_support.h>
+#include <mmc.h>
 #include <linux/libfdt.h>
 #include <fsl-mc/fsl_mc.h>
 #include <environment.h>
@@ -245,6 +246,66 @@ int board_init(void)
 	return 0;
 }
 
+struct OTA_parameter
+{
+       char status;
+       char str[0x200 - 1];
+};
+
+int ota_sdboot_check(void)
+{
+       struct mmc *mmc;
+       uint blk_start, blk_cnt;
+       unsigned long offset, size;
+       struct OTA_parameter data;
+       int dev = 0;
+       char platform[10];
+
+       offset  = 0x3F00000;
+       size    = 0x200;
+       mmc = find_mmc_device(dev);
+       if(mmc == NULL)
+               return 0;
+       if (mmc_init(mmc))
+               return 0;
+       struct blk_desc *desc = mmc_get_blk_desc(mmc);
+       blk_start   = ALIGN(offset, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_cnt     = ALIGN(size, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_dread(desc, blk_start, blk_cnt, (uchar *)&data);
+
+       if( strstr(data.str, "ls2088a") == NULL ){
+               printf("sd card is not authenticated\n");
+               return 0;
+       }
+
+       printf("status=%c\n",data.status);
+       switch(data.status)
+       {
+               case '0':
+                       break;
+               case '1':
+                       data.status = '2';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       break;
+               case '2':
+                       data.status = '3';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       return 0;
+                       break;
+               default:
+                       return 0;
+                       break;
+       }
+       return 1;
+}
+
+int last_stage_init(void)
+{
+       if(ota_sdboot_check())
+               env_set("bootcmd","run sdboot");
+       return 0;
+}
+
 int board_early_init_f(void)
 {
 #ifdef CONFIG_SYS_I2C_EARLY_INIT
diff --git a/board/freescale/lx2160a/lx2160a.c b/board/freescale/lx2160a/lx2160a.c
index 8140f3e..58dd6db 100644
--- a/board/freescale/lx2160a/lx2160a.c
+++ b/board/freescale/lx2160a/lx2160a.c
@@ -14,6 +14,7 @@
 #include <fsl_sec.h>
 #include <asm/io.h>
 #include <fdt_support.h>
+#include <mmc.h>
 #include <linux/libfdt.h>
 #include <fsl-mc/fsl_mc.h>
 #include <environment.h>
@@ -587,6 +588,66 @@ int board_init(void)
 	return 0;
 }
 
+struct OTA_parameter
+{
+       char status;
+       char str[0x200 - 1];
+};
+
+int ota_sdboot_check(void)
+{
+       struct mmc *mmc;
+       uint blk_start, blk_cnt;
+       unsigned long offset, size;
+       struct OTA_parameter data;
+       int dev = 0;
+       char platform[10];
+
+       offset  = 0x3F00000;
+       size    = 0x200;
+       mmc = find_mmc_device(dev);
+       if(mmc == NULL)
+               return 0;
+       if (mmc_init(mmc))
+               return 0;
+       struct blk_desc *desc = mmc_get_blk_desc(mmc);
+       blk_start   = ALIGN(offset, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_cnt     = ALIGN(size, mmc->read_bl_len) / mmc->read_bl_len;
+       blk_dread(desc, blk_start, blk_cnt, (uchar *)&data);
+
+       if( strstr(data.str, "lx2160a") == NULL ){
+               printf("sd card is not authenticated\n");
+               return 0;
+       }
+
+       printf("status=%c\n",data.status);
+       switch(data.status)
+       {
+               case '0':
+                       break;
+               case '1':
+                       data.status = '2';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       break;
+               case '2':
+                       data.status = '3';
+                       blk_dwrite(desc, blk_start, blk_cnt, (uchar *)&data);
+                       return 0;
+                       break;
+               default:
+                       return 0;
+                       break;
+       }
+       return 1;
+}
+
+int last_stage_init(void)
+{
+    if(ota_sdboot_check())
+        env_set("bootcmd","qixis_reset sd");
+    return 0;
+}
+
 void detail_board_ddr_info(void)
 {
 	int i;
diff --git a/configs/ls1012ardb_tfa_defconfig b/configs/ls1012ardb_tfa_defconfig
index f385d4e..88a3e92 100644
--- a/configs/ls1012ardb_tfa_defconfig
+++ b/configs/ls1012ardb_tfa_defconfig
@@ -47,6 +47,7 @@ CONFIG_DM_PCI=y
 CONFIG_DM_PCI_COMPAT=y
 CONFIG_PCIE_LAYERSCAPE=y
 CONFIG_DM_SCSI=y
+CONFIG_LAST_STAGE_INIT=y
 CONFIG_SYS_NS16550=y
 CONFIG_SPI=y
 CONFIG_DM_SPI=y
diff --git a/configs/ls1021atwr_nor_defconfig b/configs/ls1021atwr_nor_defconfig
index 4168826..45ab982 100644
--- a/configs/ls1021atwr_nor_defconfig
+++ b/configs/ls1021atwr_nor_defconfig
@@ -2,6 +2,7 @@ CONFIG_ARM=y
 CONFIG_TARGET_LS1021ATWR=y
 CONFIG_SYS_TEXT_BASE=0x60100000
 CONFIG_AHCI=y
+CONFIG_LAST_STAGE_INIT=y
 CONFIG_DISTRO_DEFAULTS=y
 CONFIG_NR_DRAM_BANKS=1
 CONFIG_FIT=y
diff --git a/configs/ls1028ardb_tfa_defconfig b/configs/ls1028ardb_tfa_defconfig
index f667867..41f30a8 100644
--- a/configs/ls1028ardb_tfa_defconfig
+++ b/configs/ls1028ardb_tfa_defconfig
@@ -63,6 +63,7 @@ CONFIG_PCIE_LAYERSCAPE=y
 CONFIG_DM_RTC=y
 CONFIG_RTC_PCF2127=y
 CONFIG_SCSI=y
+CONFIG_LAST_STAGE_INIT=y
 CONFIG_DM_SCSI=y
 CONFIG_SYS_NS16550=y
 CONFIG_SPI=y
diff --git a/configs/ls1043ardb_tfa_defconfig b/configs/ls1043ardb_tfa_defconfig
index 5802902..62e9388 100644
--- a/configs/ls1043ardb_tfa_defconfig
+++ b/configs/ls1043ardb_tfa_defconfig
@@ -30,6 +30,7 @@ CONFIG_ENV_IS_IN_NAND=y
 CONFIG_DM=y
 CONFIG_FSL_CAAM=y
 CONFIG_DM_MMC=y
+CONFIG_LAST_STAGE_INIT=y
 CONFIG_FSL_ESDHC=y
 CONFIG_MTD_NOR_FLASH=y
 CONFIG_FLASH_CFI_DRIVER=y
diff --git a/configs/ls1046afrwy_tfa_defconfig b/configs/ls1046afrwy_tfa_defconfig
index 36cdeb0..7bb7030 100644
--- a/configs/ls1046afrwy_tfa_defconfig
+++ b/configs/ls1046afrwy_tfa_defconfig
@@ -6,6 +6,7 @@ CONFIG_TFABOOT=y
 CONFIG_ARMV8_SEC_FIRMWARE_SUPPORT=y
 CONFIG_SEC_FIRMWARE_ARMV8_PSCI=y
 CONFIG_AHCI=y
+CONFIG_LAST_STAGE_INIT=y
 CONFIG_DISTRO_DEFAULTS=y
 CONFIG_NR_DRAM_BANKS=2
 CONFIG_FIT_VERBOSE=y
diff --git a/configs/ls1046ardb_tfa_defconfig b/configs/ls1046ardb_tfa_defconfig
index 057ce9d..cb5a8c5 100644
--- a/configs/ls1046ardb_tfa_defconfig
+++ b/configs/ls1046ardb_tfa_defconfig
@@ -6,6 +6,7 @@ CONFIG_TFABOOT=y
 CONFIG_ARMV8_SEC_FIRMWARE_SUPPORT=y
 CONFIG_SEC_FIRMWARE_ARMV8_PSCI=y
 CONFIG_AHCI=y
+CONFIG_LAST_STAGE_INIT=y
 CONFIG_DISTRO_DEFAULTS=y
 CONFIG_NR_DRAM_BANKS=2
 CONFIG_FIT_VERBOSE=y
diff --git a/configs/ls1088ardb_tfa_defconfig b/configs/ls1088ardb_tfa_defconfig
index 654ffa9..bc27d8f 100644
--- a/configs/ls1088ardb_tfa_defconfig
+++ b/configs/ls1088ardb_tfa_defconfig
@@ -7,6 +7,7 @@ CONFIG_TFABOOT=y
 CONFIG_ARMV8_SEC_FIRMWARE_SUPPORT=y
 CONFIG_SEC_FIRMWARE_ARMV8_PSCI=y
 CONFIG_AHCI=y
+CONFIG_LAST_STAGE_INIT=y
 CONFIG_DISTRO_DEFAULTS=y
 CONFIG_NR_DRAM_BANKS=2
 CONFIG_FIT_VERBOSE=y
diff --git a/configs/ls2088ardb_tfa_defconfig b/configs/ls2088ardb_tfa_defconfig
index ca28366..7f3d28e 100644
--- a/configs/ls2088ardb_tfa_defconfig
+++ b/configs/ls2088ardb_tfa_defconfig
@@ -7,6 +7,7 @@ CONFIG_TFABOOT=y
 CONFIG_ARMV8_SEC_FIRMWARE_SUPPORT=y
 CONFIG_SEC_FIRMWARE_ARMV8_PSCI=y
 CONFIG_AHCI=y
+CONFIG_LAST_STAGE_INIT=y
 CONFIG_NR_DRAM_BANKS=3
 CONFIG_FIT_VERBOSE=y
 CONFIG_OF_BOARD_SETUP=y
diff --git a/configs/lx2160ardb_tfa_defconfig b/configs/lx2160ardb_tfa_defconfig
index 07aacf2..cc11983 100644
--- a/configs/lx2160ardb_tfa_defconfig
+++ b/configs/lx2160ardb_tfa_defconfig
@@ -8,6 +8,7 @@ CONFIG_TFABOOT=y
 CONFIG_ARMV8_SEC_FIRMWARE_SUPPORT=y
 CONFIG_SEC_FIRMWARE_ARMV8_PSCI=y
 CONFIG_AHCI=y
+CONFIG_LAST_STAGE_INIT=y
 CONFIG_NR_DRAM_BANKS=3
 CONFIG_FIT_VERBOSE=y
 CONFIG_OF_BOARD_SETUP=y
diff --git a/include/configs/ls1012ardb.h b/include/configs/ls1012ardb.h
index f6640fa..fd12d64 100644
--- a/include/configs/ls1012ardb.h
+++ b/include/configs/ls1012ardb.h
@@ -123,5 +123,6 @@
 #endif
 
 #include <asm/fsl_secure_boot.h>
+#define CONFIG_LAST_STAGE_INIT
 
 #endif /* __LS1012ARDB_H__ */
diff --git a/include/configs/ls1021atwr.h b/include/configs/ls1021atwr.h
index 2616f4a..03b4db6 100644
--- a/include/configs/ls1021atwr.h
+++ b/include/configs/ls1021atwr.h
@@ -505,5 +505,6 @@
 
 #include <asm/fsl_secure_boot.h>
 #define CONFIG_SYS_BOOTM_LEN	(64 << 20) /* Increase max gunzip size */
+#define CONFIG_LAST_STAGE_INIT
 
 #endif
diff --git a/include/configs/ls1028ardb.h b/include/configs/ls1028ardb.h
index ea9e436..01c7972 100644
--- a/include/configs/ls1028ardb.h
+++ b/include/configs/ls1028ardb.h
@@ -79,4 +79,5 @@
 #define CONFIG_SCSI_AHCI_PLAT
 #define CONFIG_SYS_SATA1                        AHCI_BASE_ADDR1
 
+#define CONFIG_LAST_STAGE_INIT
 #endif /* __LS1028A_RDB_H */
diff --git a/include/configs/ls1043ardb.h b/include/configs/ls1043ardb.h
index 6ab83d0..3ac5a06 100644
--- a/include/configs/ls1043ardb.h
+++ b/include/configs/ls1043ardb.h
@@ -308,5 +308,6 @@
 #endif
 
 #include <asm/fsl_secure_boot.h>
+#define CONFIG_LAST_STAGE_INIT
 
 #endif /* __LS1043ARDB_H__ */
diff --git a/include/configs/ls1046afrwy.h b/include/configs/ls1046afrwy.h
index 727572d..f1145d8 100644
--- a/include/configs/ls1046afrwy.h
+++ b/include/configs/ls1046afrwy.h
@@ -239,5 +239,6 @@
 #endif
 
 #include <asm/fsl_secure_boot.h>
+#define CONFIG_LAST_STAGE_INIT
 
 #endif /* __LS1046AFRWY_H__ */
diff --git a/include/configs/ls1046ardb.h b/include/configs/ls1046ardb.h
index fa90953..7a13631 100644
--- a/include/configs/ls1046ardb.h
+++ b/include/configs/ls1046ardb.h
@@ -230,5 +230,6 @@
 #endif
 
 #include <asm/fsl_secure_boot.h>
+#define CONFIG_LAST_STAGE_INIT
 
 #endif /* __LS1046ARDB_H__ */
diff --git a/include/configs/ls1088ardb.h b/include/configs/ls1088ardb.h
index 50de658..d0c82ba 100644
--- a/include/configs/ls1088ardb.h
+++ b/include/configs/ls1088ardb.h
@@ -570,5 +570,6 @@
 #endif
 
 #include <asm/fsl_secure_boot.h>
+#define CONFIG_LAST_STAGE_INIT
 
 #endif /* __LS1088A_RDB_H */
diff --git a/include/configs/ls2080ardb.h b/include/configs/ls2080ardb.h
index ee9b348..6884f3a 100644
--- a/include/configs/ls2080ardb.h
+++ b/include/configs/ls2080ardb.h
@@ -411,10 +411,10 @@ unsigned long get_board_sys_clk(void);
 	"kernel_size_sd=0x14000\0"              \
 	"console=ttyAMA0,38400n8\0"		\
 	"mcmemsize=0x70000000\0"		\
-	"sd_bootcmd=echo Trying load from SD ..;" \
-	"mmcinfo; mmc read $load_addr "		\
-	"$kernel_addr_sd $kernel_size_sd && "	\
-	"bootm $load_addr#$board\0"             \
+	"sdboot=echo Trying load from SD ..;"   \
+	"fsl_mc apply dpl 0x580D00000; "        \
+	"run bootcmd_mmc0; "                    \
+	"reset\0"   \
 	QSPI_MC_INIT_CMD				\
 	BOOTENV					\
 	"boot_scripts=ls2088ardb_boot.scr\0"	\
@@ -444,11 +444,9 @@ unsigned long get_board_sys_clk(void);
 		"$kernelheader_size && esbc_validate ${kernelheader_addr_r}; "\
 		" bootm $load_addr#$board\0"			\
 	"nor_bootcmd=echo Trying load from nor..;"		\
-		"cp.b $kernel_addr $load_addr "			\
-		"$kernel_size ; env exists secureboot && "	\
-		"cp.b $kernelheader_addr $kernelheader_addr_r "	\
-		"$kernelheader_size && esbc_validate ${kernelheader_addr_r}; "\
-		"bootm $load_addr#$board\0"
+		"fsl_mc apply dpl 0x580D00000 && "              \
+		"cp.b 0x581000000 0xa0000000 "                  \
+		"0x2800000 && bootm 0xa0000000\0"
 #else
 #define CONFIG_EXTRA_ENV_SETTINGS		\
 	"hwconfig=fsl_ddr:bank_intlv=auto\0"	\
@@ -474,10 +472,10 @@ unsigned long get_board_sys_clk(void);
 	"kernel_size_sd=0x14000\0"              \
 	"console=ttyAMA0,38400n8\0"		\
 	"mcmemsize=0x70000000\0"		\
-	"sd_bootcmd=echo Trying load from SD ..;" \
-	"mmcinfo; mmc read $load_addr "		\
-	"$kernel_addr_sd $kernel_size_sd && "	\
-	"bootm $load_addr#$board\0"             \
+	"sdboot=echo Trying load from SD ..;"   \
+	"fsl_mc apply dpl 0x580D00000; "        \
+	"run bootcmd_mmc0; "                    \
+	"reset\0"                               \
 	MC_INIT_CMD				\
 	BOOTENV					\
 	"boot_scripts=ls2088ardb_boot.scr\0"	\
@@ -508,11 +506,10 @@ unsigned long get_board_sys_clk(void);
 		"$kernelheader_size && esbc_validate ${kernelheader_addr_r}; "\
 		" bootm $load_addr#$board\0"			\
 	"nor_bootcmd=echo Trying load from nor..;"		\
-		"cp.b $kernel_addr $load_addr "			\
-		"$kernel_size ; env exists secureboot && "	\
-		"cp.b $kernelheader_addr $kernelheader_addr_r "	\
-		"$kernelheader_size && esbc_validate ${kernelheader_addr_r}; "\
-		"bootm $load_addr#$board\0"
+		"fsl_mc apply dpl 0x580D00000 && "              \
+		"cp.b 0x581000000 0xa0000000 "                  \
+		"0x2800000 && bootm 0xa0000000\0"
+
 #endif
 
 #ifdef CONFIG_TFABOOT
@@ -537,11 +534,7 @@ unsigned long get_board_sys_clk(void);
 
 /* Try to boot an on-NOR kernel first, then do normal distro boot */
 #define IFC_NOR_BOOTCOMMAND						\
-			"env exists mcinitcmd && env exists secureboot "\
-			"&& esbc_validate 0x580780000; env exists mcinitcmd "\
-			"&& fsl_mc lazyapply dpl 0x580d00000;"		\
-			"run distro_bootcmd;run nor_bootcmd; "		\
-			"env exists secureboot && esbc_halt;"
+			"run nor_bootcmd "
 #else
 #undef CONFIG_BOOTCOMMAND
 #ifdef CONFIG_QSPI_BOOT
@@ -567,11 +560,7 @@ unsigned long get_board_sys_clk(void);
 #else
 /* Try to boot an on-NOR kernel first, then do normal distro boot */
 #define CONFIG_BOOTCOMMAND						\
-			"env exists mcinitcmd && env exists secureboot "\
-			"&& esbc_validate 0x580780000; env exists mcinitcmd "\
-			"&& fsl_mc lazyapply dpl 0x580d00000;"		\
-			"run distro_bootcmd;run nor_bootcmd; "		\
-			"env exists secureboot && esbc_halt;"
+			"run nor_bootcmd "
 #endif
 #endif
 
@@ -599,6 +588,11 @@ unsigned long get_board_sys_clk(void);
 #define CONFIG_ETHPRIME		"DPMAC1@xgmii"
 #endif
 
+#ifndef CONFIG_BOOTCOMMAND
+#define CONFIG_BOOTCOMMAND "run nor_bootcmd"
+#endif
+
+#define CONFIG_LAST_STAGE_INIT
 #include <asm/fsl_secure_boot.h>
 
 #endif /* __LS2_RDB_H */
diff --git a/include/configs/lx2160ardb.h b/include/configs/lx2160ardb.h
index 3cc275d..958dd0b 100644
--- a/include/configs/lx2160ardb.h
+++ b/include/configs/lx2160ardb.h
@@ -111,6 +111,7 @@
 		" && esbc_validate ${kernelheader_addr_r};"	\
 		"bootm $load_addr#$BOARD\0"
 
+#define CONFIG_LAST_STAGE_INIT
 #include <asm/fsl_secure_boot.h>
 
 #endif /* __LX2_RDB_H */
-- 
2.7.4

