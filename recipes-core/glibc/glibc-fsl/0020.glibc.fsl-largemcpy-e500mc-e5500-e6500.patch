diff -ruN glibc-2.20-mcpy-new-large-original/include/string.h glibc-2.20-mcpy-new-large-mcpy-new/include/string.h
--- glibc-2.20-mcpy-new-large-original/include/string.h	2015-09-02 14:28:58.404187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/include/string.h	2015-09-02 14:30:49.773187000 -0500
@@ -70,6 +70,9 @@
     }))
 #endif
 
+#if defined (__powerpc__)
+libc_hidden_proto (largememcpy)
+#endif
 libc_hidden_proto (__mempcpy)
 libc_hidden_proto (__stpcpy)
 libc_hidden_proto (__stpncpy)
diff -ruN glibc-2.20-mcpy-new-large-original/string/string.h glibc-2.20-mcpy-new-large-mcpy-new/string/string.h
--- glibc-2.20-mcpy-new-large-original/string/string.h	2015-09-02 14:28:58.383187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/string/string.h	2015-09-02 14:30:49.752187000 -0500
@@ -45,6 +45,10 @@
 /* Copy N bytes of SRC to DEST.  */
 extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
 		     size_t __n) __THROW __nonnull ((1, 2));
+#if defined (__powerpc__)
+extern void *largememcpy (void *__restrict __dest, const void *__restrict __src,
+		     size_t __n) __THROW __nonnull ((1, 2));
+#endif
 /* Copy N bytes of SRC to DEST, guaranteeing
    correct behavior for overlapping strings.  */
 extern void *memmove (void *__dest, const void *__src, size_t __n)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/memcpy.c glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/memcpy.c
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/memcpy.c	1969-12-31 18:00:00.000000000 -0600
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/memcpy.c	2015-09-02 14:30:49.590187000 -0500
@@ -0,0 +1,4 @@
+#include <string/memcpy.c>
+
+weak_alias (memcpy, largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/405/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/405/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/405/memcpy.S	2015-09-02 14:28:58.206187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/405/memcpy.S	2015-09-02 14:30:49.554187000 -0500
@@ -128,3 +128,5 @@
        blr
 END (memcpy)
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy,largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/a2/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/a2/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/a2/memcpy.S	2015-09-02 14:28:58.194187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/a2/memcpy.S	2015-09-02 14:30:49.541187000 -0500
@@ -525,3 +525,5 @@
 
 END (memcpy)
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy, largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/cell/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/cell/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/cell/memcpy.S	2015-09-02 14:28:58.213187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/cell/memcpy.S	2015-09-02 14:30:49.561187000 -0500
@@ -240,3 +240,5 @@
 
 END (memcpy)
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy, largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/e500/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/e500/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/e500/memcpy.S	2015-09-02 14:29:07.888186901 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/e500/memcpy.S	2015-09-02 14:30:49.539187000 -0500
@@ -406,3 +406,8 @@
 
 END (FUNCTION)
 libc_hidden_builtin_def (FUNCTION)
+
+#ifndef __MEMMOVE__
+weak_alias (memcpy,largememcpy)
+libc_hidden_def (largememcpy)
+#endif
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/e500mc/largememcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/e500mc/largememcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/e500mc/largememcpy.S	1969-12-31 18:00:00.000000000 -0600
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/e500mc/largememcpy.S	2015-09-02 14:54:00.062186965 -0500
@@ -0,0 +1,499 @@
+/* Optimized largememcpy implementation for e500mc 32-bit PowerPC.
+   This version uses cache management instructions.
+
+   Copyright (C) 2015 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+
+/* __ptr_t [r3]
+   largememcpy (__ptr_t dst [r3], __ptr_t src [r4], size_t len [r5]);
+   Returns 'dst'.
+
+	 r3 = destination
+	 r4 = source
+	 r5 = byte count
+
+	 volatile fixed point registers usable:
+	 r0, r3-r12
+
+	 volatile floating point registers usable:
+	 f0-f13.  */
+
+EALIGN (largememcpy, 5, 0)
+	cmplw	cr0, r4, r3		/* if source==destination, return.  */
+	beqlr	cr0
+	/* if number of bytes is less than 8 (optimal value TBD),
+	   but greater than zero, copy byte-by-byte.  */
+	cmplwi	r5, 8
+	mr	r6, r3
+	blt	L(copy_bytes)
+	neg	r0, r4
+	andi.	r11, r0, 3
+	beq	L(src_aligned4)
+        /* We have to align the src pointer by r11 bytes */
+	cmplwi  cr0, r11, 1
+	ble     L(src_1)
+	/* 2 or 3 bytes */
+	addi    r8, r11, -2
+	lhz     r9, 0(r4)
+	lhzx    r12, r4, r8
+	sth     r9, 0(r6)
+	sthx    r12, r6, r8
+	b       L(src_0)
+L(src_1):
+	lbz     r8, 0(r4)
+	stb     r8, 0(r6)
+L(src_0):
+	subf	r5, r11, r5
+	add	r4, r4, r11
+	add	r6, r6, r11
+L(src_aligned4):
+	cmplwi	7, r5, 63
+	ble	7, L(copy_remaining)
+	andi.	r10, r0, 63
+	beq	L(src_aligned64)
+	subf.	r10, r11, r10
+	beq	0, L(src_aligned64)
+	srwi	r11, r10, 2
+	subf	r5, r10, r5
+	mtctr	r11
+L(copy_salign4):
+	lwz	0, 0(r4)
+	addi	r4, r4, 4
+	stw	0, 0(r6)
+	addi	r6, r6, 4
+	bdnz	L(copy_salign4)
+L(src_aligned64):
+	srwi.	r11, r5, 6		/* No of 64 byte copy count.  */
+	beq	0, L(copy_remaining)
+	rlwinm	r5, r5, 0, 26, 31	/* remaining bytes.  */
+	rlwinm.	r0, r6, 0, 29, 31
+	bne	0, L(src_dnalign)
+	cmplwi	7, r11, 256
+	ble	7, L(label1)
+	addi	r7, r11, -256
+	mtctr	r7
+#ifdef SHARED
+	mflr	r0
+	/* Establishes GOT addressability so we can load __cache_line_size from
+	   static.  This value was set from the aux vector during startup.  */
+	SETUP_GOT_ACCESS(r9,got_label_1)
+	addis	r9, r9, __cache_line_size-got_label_1@ha
+	lwz	r9, __cache_line_size-got_label_1@l(r9)
+	mtlr	r0
+#else
+	/* Load __cache_line_size from static.  This value was set from the
+	   aux vector during startup.  */
+	lis	r9, __cache_line_size@ha
+	lwz	r9, __cache_line_size@l(r9)
+#endif
+	cmplwi	5, r9, 64
+	li	r10, 256
+	li	r12, 64
+	bne	5, L(lcopy_dalign_nc)
+L(lcopy_dalign):
+	dcbt	r10, r4
+	dcbzl	r12, r6
+#ifndef _SOFT_FLOAT
+	lfd	0, 0(r4)
+	lfd	1, 8(r4)
+	lfd	2, 16(r4)
+	lfd	3, 24(r4)
+	lfd	4, 32(r4)
+	lfd	5, 40(r4)
+	lfd	6, 48(r4)
+	lfd	7, 56(r4)
+	stfd	0, 0(r6)
+	stfd	1, 8(r6)
+	stfd	2, 16(r6)
+	stfd	3, 24(r6)
+	addi	r4, r4, 64
+	stfd	4, 32(r6)
+	stfd	5, 40(r6)
+	stfd	6, 48(r6)
+	stfd	7, 56(r6)
+#else
+	lwz	r0, 0(r4)
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	stw	r9, 20(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	lwz	r9, 32(r4)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	stw	r9, 32(r6)
+	lwz	r0, 36(r4)
+	lwz	r8, 40(r4)
+	lwz	r9, 44(r4)
+	stw	r0, 36(r6)
+	stw	r8, 40(r6)
+	stw	r9, 44(r6)
+	lwz	r0, 48(r4)
+	lwz	r8, 52(r4)
+	lwz	r9, 56(r4)
+	stw	r0, 48(r6)
+	lwz	r0, 60(r4)
+	addi	r4, r4, 64
+	stw	r8, 52(r6)
+	stw	r9, 56(r6)
+	stw	r0, 60(r6)
+#endif
+	dcbf	0, r6
+	addi	r6, r6, 64
+	bdnz	L(lcopy_dalign)
+	subf	r11, r7, r11
+L(label1):
+	mtctr	r11
+L(copy_dalign):
+#ifndef _SOFT_FLOAT
+	lfd	0, 0(r4)
+	lfd	1, 8(r4)
+	lfd	2, 16(r4)
+	lfd	3, 24(r4)
+	stfd	0, 0(r6)
+	stfd	1, 8(r6)
+	stfd	2, 16(r6)
+	stfd	3, 24(r6)
+	lfd	0, 32(r4)
+	lfd	1, 40(r4)
+	lfd	2, 48(r4)
+	lfd	3, 56(r4)
+	addi	r4, r4, 64
+	stfd	0, 32(r6)
+	stfd	1, 40(r6)
+	stfd	2, 48(r6)
+	stfd	3, 56(r6)
+#else
+	lwz	r0, 0(r4)
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	stw	r9, 20(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	lwz	r9, 32(r4)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	stw	r9, 32(r6)
+	lwz	r0, 36(r4)
+	lwz	r8, 40(r4)
+	lwz	r9, 44(r4)
+	stw	r0, 36(r6)
+	stw	r8, 40(r6)
+	stw	r9, 44(r6)
+	lwz	r0, 48(r4)
+	lwz	r8, 52(r4)
+	lwz	r9, 56(r4)
+	stw	r0, 48(r6)
+	lwz	r0, 60(r4)
+	addi	r4, r4, 64
+	stw	r8, 52(r6)
+	stw	r9, 56(r6)
+	stw	r0, 60(r6)
+#endif
+	addi	r6, r6, 64
+	bdnz	L(copy_dalign)
+L(copy_remaining):
+	srwi.	r11, r5, 3		/* No of 8 byte copy count.  */
+	rlwinm	r5, r5, 0, 29, 31	/* remaining bytes.  */
+	beq	0, L(copy_bytes)
+	mtcrf	0x01, r11
+	bf	cr7*4+1, L(cp16b)
+	lwz	r0, 0(r4)		/* copy 32 bytes.  */
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	addi	r4, r4, 32
+	stw	r9, 20(r6)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	addi	r6, r6, 32
+L(cp16b):
+	bf	cr7*4+2, L(cp8b)
+	lwz	r0, 0(r4)		/* copy 16 bytes.  */
+	lwz	r7, 4(r4)
+	lwz	r8, 8(r4)
+	lwz	r9, 12(r4)
+	addi	r4, r4, 16
+	stw	r0, 0(r6)
+	stw	r7, 4(r6)
+	stw	r8, 8(r6)
+	stw	r9, 12(r6)
+	addi	r6, r6, 16
+L(cp8b):
+	bf	cr7*4+3, L(copy_bytes)
+	lwz	r0, 0(r4)		/* copy 8 bytes.  */
+	lwz	r7, 4(r4)
+	addi	r4, r4, 8
+	stw	r0, 0(r6)
+	stw	r7, 4(r6)
+	addi	r6, r6, 8
+L(copy_bytes):
+	cmplwi	cr1, r5, 4
+	cmplwi	cr0, r5, 1
+	bgt	cr1, L(gt4b)		/* nb > 4?  (5, 6, 7 bytes).  */
+	ble	cr0, L(lt1b)		/* nb <= 1? (0, 1 bytes).  */
+	addi	r0, r5, -2		/* 2, 3, 4 bytes.  */
+	lhz	r9, 0(r4)
+	lhzx	r11, r4, r0
+	sth	r9, 0(r6)
+	sthx	r11, r6, r0
+	blr
+L(gt4b):
+	addi	r0, r5, -4		/* 5, 6, 7 bytes.  */
+	lwz	r9, 0(r4)
+	lwzx	r11, r4, r0
+	stw	r9, 0(r6)
+	stwx	r11, r6, r0
+	blr
+L(lt1b):
+	mtocrf	0x1, r5			/* nb == 0 ? return.  */
+	bflr	31
+	lbz	r0, 0(r4)		/* nb == 1.  */
+	stb	r0, 0(r6)
+	blr
+
+L(src_dnalign):
+	cmplwi	7, r11, 256
+	ble	7, L(label2)
+	addi	r7, r11, -256
+	mtctr	r7
+#ifdef SHARED
+	mflr	r0
+	/* Establishes GOT addressability so we can load __cache_line_size from
+	   static.  This value was set from the aux vector during startup.  */
+	SETUP_GOT_ACCESS(r9,got_label_2)
+	addis	r9, r9, __cache_line_size-got_label_2@ha
+	lwz	r9, __cache_line_size-got_label_2@l(r9)
+	mtlr	r0
+#else
+	/* Load __cache_line_size from static.  This value was set from the
+	   aux vector during startup.  */
+	lis	r9, __cache_line_size@ha
+	lwz	r9, __cache_line_size@l(r9)
+#endif
+	cmplwi	5, r9, 64
+	li	r10, 256
+	li	r12, 64
+	bne	5, L(lcopy_dnalign_nc)
+L(lcopy_dnalign):
+	dcbt	r10, r4
+	dcbzl	r12, r6
+	lwz	r0, 0(r4)		/* copy 64 bytes.  */
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	stw	r9, 20(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	lwz	r9, 32(r4)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	stw	r9, 32(r6)
+	lwz	r0, 36(r4)
+	lwz	r8, 40(r4)
+	lwz	r9, 44(r4)
+	stw	r0, 36(r6)
+	stw	r8, 40(r6)
+	stw	r9, 44(r6)
+	lwz	r0, 48(r4)
+	lwz	r8, 52(r4)
+	lwz	r9, 56(r4)
+	stw	r0, 48(r6)
+	lwz	r0, 60(r4)
+	addi	r4, r4, 64
+	stw	r8, 52(r6)
+	stw	r9, 56(r6)
+	stw	r0, 60(r6)
+	dcbf	0, r6
+	addi	r6, r6, 64
+	bdnz	L(lcopy_dnalign)
+	li	r11, 256
+L(label2):
+	mtctr	r11
+L(copy_dnalign):
+	lwz	r0, 0(r4)		/* copy 64 bytes.  */
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	stw	r9, 20(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	lwz	r9, 32(r4)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	stw	r9, 32(r6)
+	lwz	r0, 36(r4)
+	lwz	r8, 40(r4)
+	lwz	r9, 44(r4)
+	stw	r0, 36(r6)
+	stw	r8, 40(r6)
+	stw	r9, 44(r6)
+	lwz	r0, 48(r4)
+	lwz	r8, 52(r4)
+	lwz	r9, 56(r4)
+	stw	r0, 48(r6)
+	lwz	r0, 60(r4)
+	addi	r4, r4, 64
+	stw	r8, 52(r6)
+	stw	r9, 56(r6)
+	stw	r0, 60(r6)
+	addi	r6, r6, 64
+	bdnz	L(copy_dnalign)
+	b	L(copy_remaining)
+
+L(lcopy_dalign_nc):
+#ifndef _SOFT_FLOAT
+	lfd	0, 0(r4)		/* copy 64 bytes.  */
+	lfd	1, 8(r4)
+	lfd	2, 16(r4)
+	lfd	3, 24(r4)
+	lfd	4, 32(r4)
+	lfd	5, 40(r4)
+	lfd	6, 48(r4)
+	lfd	7, 56(r4)
+	stfd	0, 0(r6)
+	stfd	1, 8(r6)
+	stfd	2, 16(r6)
+	stfd	3, 24(r6)
+	addi	r4, r4, 64
+	stfd	4, 32(r6)
+	stfd	5, 40(r6)
+	stfd	6, 48(r6)
+	stfd	7, 56(r6)
+#else
+	lwz	r0, 0(r4)		/* copy 64 bytes.  */
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	stw	r9, 20(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	lwz	r9, 32(r4)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	stw	r9, 32(r6)
+	lwz	r0, 36(r4)
+	lwz	r8, 40(r4)
+	lwz	r9, 44(r4)
+	stw	r0, 36(r6)
+	stw	r8, 40(r6)
+	stw	r9, 44(r6)
+	lwz	r0, 48(r4)
+	lwz	r8, 52(r4)
+	lwz	r9, 56(r4)
+	stw	r0, 48(r6)
+	lwz	r0, 60(r4)
+	addi	r4, r4, 64
+	stw	r8, 52(r6)
+	stw	r9, 56(r6)
+	stw	r0, 60(r6)
+#endif
+	addi	r6, r6, 64
+	bdnz	L(lcopy_dalign_nc)
+	subf	r11, r7, r11
+	b	L(label1)
+
+L(lcopy_dnalign_nc):
+	lwz	r0, 0(r4)		/* copy 64 bytes.  */
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	stw	r9, 20(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	lwz	r9, 32(r4)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	stw	r9, 32(r6)
+	lwz	r0, 36(r4)
+	lwz	r8, 40(r4)
+	lwz	r9, 44(r4)
+	stw	r0, 36(r6)
+	stw	r8, 40(r6)
+	stw	r9, 44(r6)
+	lwz	r0, 48(r4)
+	lwz	r8, 52(r4)
+	lwz	r9, 56(r4)
+	stw	r0, 48(r6)
+	lwz	r0, 60(r4)
+	addi	r4, r4, 64
+	stw	r8, 52(r6)
+	stw	r9, 56(r6)
+	stw	r0, 60(r6)
+	addi	r6, r6, 64
+	bdnz	L(lcopy_dnalign_nc)
+	li	r11, 256
+	b	L(label2)
+
+END (largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/e500mc/Makefile glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/e500mc/Makefile
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/e500mc/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/e500mc/Makefile	2015-09-02 14:30:49.552187000 -0500
@@ -0,0 +1,5 @@
+#Makefile fragment for PowerPC e500mc core
+
+ifeq ($(subdir),string)
+sysdep_routines += largememcpy
+endif
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/e5500/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/e5500/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/e5500/memcpy.S	2015-09-02 14:28:58.208187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/e5500/memcpy.S	2015-09-02 14:30:49.556187000 -0500
@@ -249,4 +249,6 @@
 	b	L(copy_remaining)
 
 END (memcpy)
+weak_alias (memcpy, largememcpy)
 libc_hidden_builtin_def (memcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/e6500/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/e6500/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/e6500/memcpy.S	2015-09-02 14:28:58.214187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/e6500/memcpy.S	2015-09-02 14:30:49.562187000 -0500
@@ -237,3 +237,5 @@
 
 END (memcpy)
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy,largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/power4/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/power4/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/power4/memcpy.S	2015-09-02 14:28:58.194187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/power4/memcpy.S	2015-09-02 14:30:49.541187000 -0500
@@ -479,3 +479,5 @@
 END (memcpy)
 
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy, largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/power6/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/power6/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/power6/memcpy.S	2015-09-02 14:28:58.211187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/power6/memcpy.S	2015-09-02 14:30:49.559187000 -0500
@@ -905,3 +905,5 @@
 END (memcpy)
 
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy, largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/power7/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/power7/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc32/power7/memcpy.S	2015-09-02 14:28:58.207187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc32/power7/memcpy.S	2015-09-02 14:30:49.555187000 -0500
@@ -536,3 +536,5 @@
 
 END (memcpy)
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy, largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/a2/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/a2/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/a2/memcpy.S	2015-09-02 14:28:58.219187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/a2/memcpy.S	2015-09-02 14:30:49.567187000 -0500
@@ -522,3 +522,5 @@
 
 END_GEN_TB (memcpy,TB_TOCLESS)
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy, largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/cell/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/cell/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/cell/memcpy.S	2015-09-02 14:28:58.239187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/cell/memcpy.S	2015-09-02 14:30:49.588187000 -0500
@@ -240,3 +240,5 @@
 
 END_GEN_TB (memcpy,TB_TOCLESS)
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy, largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/e5500/largememcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/e5500/largememcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/e5500/largememcpy.S	1969-12-31 18:00:00.000000000 -0600
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/e5500/largememcpy.S	2015-09-02 14:56:08.056186467 -0500
@@ -0,0 +1,221 @@
+/* Optimized largememcpy implementation for e5500 64-bit PowerPC64.
+   This version uses cache management instructions.
+
+   Copyright (C) 2015 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+
+/* __ptr_t [r3] largememcpy __ptr_t dst [r3], __ptr_t src [r4], size_t len [r5]
+   Returns 'dst'.
+
+	 r3 = destination
+	 r4 = source
+	 r5 = byte count
+
+	 volatile fixed point registers usable:
+	 r0, r3-r12
+
+	 volatile floating point registers usable:
+	 f0-f13.  */
+
+	.section ".toc", "aw"
+.LC0:
+	.tc __cache_line_size[TC], __cache_line_size
+	.section ".text"
+	.align 2
+
+EALIGN (largememcpy, 5, 0)
+	CALL_MCOUNT 3
+	cmpld	cr0, r4, r3		/* if source==destination, return.  */
+	beqlr	cr0
+	/* if number of bytes is less than 8, (optimal value TBD),
+	   but greater than zero copy byte-by-byte.  */
+	cmpldi	r5, 8
+	mr	r6, r3
+	blt	L(copy_bytes)
+	neg	r0, r4
+	andi.	r11, r0, 7
+	beq	L(src_aligned)
+	/* We have to align the src pointer by r11 bytes */
+	cmplwi	cr1, r11, 4
+	cmplwi	cr0, r11, 1
+	bgt	cr1, L(src_567)
+	ble	cr0, L(src_1)
+	/* 2, 3 or 4 bytes */
+	addi	r0, r11, -2
+	lhz	r9, 0(r4)
+	lhzx	r12, r4, r0
+	sth	r9, 0(r6)
+	sthx	r12, r6, r0
+	b	L(src_0)
+L(src_567):
+	addi	r0, r11, -4
+	lwz	r9, 0(r4)
+	lwzx	r12, r4, r0
+	stw	r9, 0(r6)
+	stwx	r12, r6, r0
+	b	L(src_0)
+L(src_1):
+	lbz	r0, 0(r4)
+	stb	r0, 0(r6)
+L(src_0):
+	subf	r5, r11, r5
+	add	r4, r4, r11
+	add	r6, r6, r11
+L(src_aligned):
+	cmpldi	7, r5, 63
+	ble	7, L(copy_remaining)
+	srwi	r11, r5, 6		/* No of 64 byte copy count.  */
+	rlwinm.	r5, r5, 0, 26, 31	/* remaining bytes.  */
+	cmpldi	7, r11, 256
+	ble	7, L(2)
+	rlwinm.	r0, r6, 0, 28, 31
+	cmpldi	r0, 8
+	addi	r7, r11, -256
+	mtctr	r7
+	ble	L(copy_dnaligned)
+	ld	r9, .LC0@toc(r2)	/* get cache line size.  */
+	lwz	r9, 0(r9)
+	cmpldi	5, r9, 64
+	li	r10, 256
+	li	r12, 64
+	bne	5, L(copy_dnaligned)
+L(lcopy_daligned):
+	dcbt	r10, r4
+	dcbzl	r12, r6
+	ld	r0, 0(r4)		/* 64-byte copy.  */
+	ld	r7, 8(r4)
+	ld	r8, 16(r4)
+	ld	r9, 24(r4)
+	std	r0, 0(r6)
+	std	r7, 8(r6)
+	std	r8, 16(r6)
+	std	r9, 24(r6)
+	ld	r0, 32(r4)
+	ld	r7, 40(r4)
+	ld	r8, 48(r4)
+	ld	r9, 56(r4)
+	addi	r4, r4, 64
+	std	r0, 32(r6)
+	std	r7, 40(r6)
+	std	r8, 48(r6)
+	std	r9, 56(r6)
+	dcbf	0, r6
+	addi	r6, r6, 64
+	bdnz	L(lcopy_daligned)
+L(1):	li	r11, 256
+L(2):	mtctr	r11
+L(copy_daligned):
+	ld	r0, 0(r4)
+	ld	r7, 8(r4)
+	ld	r8, 16(r4)
+	ld	r9, 24(r4)
+	std	r0, 0(r6)
+	std	r7, 8(r6)
+	std	r8, 16(r6)
+	std	r9, 24(r6)
+	ld	r0, 32(r4)
+	ld	r7, 40(r4)
+	ld	r8, 48(r4)
+	ld	r9, 56(r4)
+	addi	r4, r4, 64
+	std	r0, 32(r6)
+	std	r7, 40(r6)
+	std	r8, 48(r6)
+	std	r9, 56(r6)
+	addi	r6, r6, 64
+	bdnz	L(copy_daligned)
+L(copy_remaining):
+	srwi.	r11, r5, 3		/* No of 8 byte copy count.  */
+	rlwinm	r5, r5, 0, 29, 31	/* remaining bytes.  */
+	beq	0, L(copy_bytes)
+	mtcrf	0x01, r11
+	bf	cr7*4+1, L(cp16b)
+	ld	r0, 0(r4)		/* copy 32 bytes.  */
+	ld	r7, 8(r4)
+	ld	r8, 16(r4)
+	ld	r9, 24(r4)
+	addi	r4, r4, 32
+	std	r0, 0(r6)
+	std	r7, 8(r6)
+	std	r8, 16(r6)
+	std	r9, 24(r6)
+	addi	r6, r6, 32
+L(cp16b):
+	bf	cr7*4+2, L(cp8b)	/* copy 16 bytes.  */
+	ld	r7, 0(r4)
+	ld	r8, 8(r4)
+	addi	r4, r4, 16
+	std	r7, 0(r6)
+	std	r8, 8(r6)
+	addi	r6, r6, 16
+L(cp8b):
+	bf	cr7*4+3, L(copy_bytes)	/* copy 8 bytes.  */
+	ld	r7, 0(r4)
+	addi	r4, r4, 8
+	std	r7, 0(r6)
+	addi	r6, r6, 8
+L(copy_bytes):
+	cmpldi	cr1, r5, 4
+	cmpldi	cr0, r5, 1
+	bgt	cr1, L(gt4b)		/* nb > 4?  (5, 6, 7 bytes).  */
+	ble	cr0, L(lt1b)		/* nb <= 1? (0, 1 bytes).  */
+	addi	r0, r5, -2		/* 2, 3, 4 bytes.  */
+	lhz	r9, 0(r4)
+	lhzx	r11, r4, r0
+	sth	r9, 0(r6)
+	sthx	r11, r6, r0
+	blr
+L(gt4b):
+	addi	r0, r5, -4		/* 5, 6, 7 bytes.  */
+	lwz	r9, 0(r4)
+	lwzx	r11, r4, r0
+	stw	r9, 0(r6)
+	stwx	r11, r6, r0
+	blr
+L(lt1b):
+	mtocrf	0x1, r5			/* nb == 0 ? return.  */
+	bflr	31
+	lbz	r0, 0(r4)		/* nb == 1.  */
+	stb	r0, 0(r6)
+	blr
+L(copy_dnaligned):
+	ld	r0, 0(r4)
+	ld	r7, 8(r4)
+	ld	r8, 16(r4)
+	ld	r9, 24(r4)
+	std	r0, 0(r6)
+	std	r7, 8(r6)
+	std	r8, 16(r6)
+	std	r9, 24(r6)
+	ld	r0, 32(r4)
+	ld	r7, 40(r4)
+	ld	r8, 48(r4)
+	ld	r9, 56(r4)
+	addi	r4, r4, 64
+	std	r0, 32(r6)
+	std	r7, 40(r6)
+	std	r8, 48(r6)
+	std	r9, 56(r6)
+	addi	r6, r6, 64
+	bdnz	L(copy_dnaligned)
+	b	L(1)
+
+END_GEN_TB (largememcpy,TB_TOCLESS)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/e5500/Makefile glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/e5500/Makefile
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/e5500/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/e5500/Makefile	2015-09-02 14:30:49.572187000 -0500
@@ -0,0 +1,5 @@
+#Makefile fragment for PowerPC e5500 64-bit core
+
+ifeq ($(subdir),string)
+sysdep_routines += largememcpy
+endif
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/e6500/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/e6500/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/e6500/memcpy.S	2015-09-02 14:28:58.240187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/e6500/memcpy.S	2015-09-02 14:30:49.589187000 -0500
@@ -210,4 +210,6 @@
 	b	L(copy_remaining)
 
 END_GEN_TB (memcpy,TB_TOCLESS)
+weak_alias (memcpy,largememcpy)
 libc_hidden_builtin_def (memcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/power4/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/power4/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/power4/memcpy.S	2015-09-02 14:28:58.219187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/power4/memcpy.S	2015-09-02 14:30:49.567187000 -0500
@@ -472,3 +472,5 @@
     blr
 END_GEN_TB (memcpy,TB_TOCLESS)
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy,largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/power6/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/power6/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/power6/memcpy.S	2015-09-02 14:28:58.238187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/power6/memcpy.S	2015-09-02 14:30:49.586187000 -0500
@@ -1494,3 +1494,5 @@
     blr
 END_GEN_TB (memcpy,TB_TOCLESS)
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy,largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/power7/memcpy.S glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/power7/memcpy.S
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/powerpc64/power7/memcpy.S	2015-09-02 14:28:58.222187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/powerpc64/power7/memcpy.S	2015-09-02 14:30:49.570187000 -0500
@@ -424,3 +424,5 @@
 
 END_GEN_TB (memcpy,TB_TOCLESS)
 libc_hidden_builtin_def (memcpy)
+weak_alias (memcpy,largememcpy)
+libc_hidden_def (largememcpy)
diff -ruN glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/Versions glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/Versions
--- glibc-2.20-mcpy-new-large-original/sysdeps/powerpc/Versions	2015-09-02 14:28:58.244187000 -0500
+++ glibc-2.20-mcpy-new-large-mcpy-new/sysdeps/powerpc/Versions	2015-09-02 14:30:49.593187000 -0500
@@ -9,6 +9,7 @@
   GLIBC_2.3.4 {
     _longjmp; __sigsetjmp; _setjmp;
     longjmp; setjmp;
+    largememcpy;
   }
   GLIBC_PRIVATE {
     __novmx__libc_longjmp; __novmx__libc_siglongjmp;
