
 This patch implements -fuse-load-updates

 Prior to this patch, GCC will only combine a load/store and unit-increment into a
 load/store with update instruction. This patch adds support for the generation of
 {load, store}-with-update instructions past non-unit increments.

 -fuse-load-updates is ON by default for 64-bit and OFF by default for 32-bit

 Cores supported: e5500, e6500, e500mc

diff -Naur gcc-4.9.1/gcc/common.opt gcc-4.9.1-pre-modify-disp-support/gcc/common.opt
--- gcc-4.9.1/gcc/common.opt	2014-08-13 01:25:45.156015000 -0500
+++ gcc-4.9.1-pre-modify-disp-support/gcc/common.opt	2014-08-13 01:30:08.579014919 -0500
@@ -2288,6 +2288,14 @@
 fuse-linker-plugin
 Common Undocumented Var(flag_use_linker_plugin)
 
+; Initialize flag_use_load_updates to -1
+; That way, it gets set to 1 on -fuse-load-updates and to 0 on -fno-use-load-updates
+; when these options are explicitly used by the user. This helps us default it to ON
+; on 64-bit and OFF in 32-bit
+fuse-load-updates
+Common Report Var(flag_use_load_updates) Init(-1) Optimization
+Support generation of {load, store}-with-update instructions past non-unit increments
+
 ; Positive if we should track variables, negative if we should run
 ; the var-tracking pass only to discard debug annotations, zero if
 ; we're not to run it.  When flag_var_tracking == 2 (AUTODETECT_VALUE) it
diff -Naur gcc-4.9.1/gcc/config/rs6000/rs6000.c gcc-4.9.1-pre-modify-disp-support/gcc/config/rs6000/rs6000.c
--- gcc-4.9.1/gcc/config/rs6000/rs6000.c	2014-08-13 01:25:45.210015000 -0500
+++ gcc-4.9.1-pre-modify-disp-support/gcc/config/rs6000/rs6000.c	2014-08-13 01:30:08.587015007 -0500
@@ -4071,6 +4071,12 @@
   if (TARGET_LINK_STACK == -1)
     SET_TARGET_LINK_STACK (rs6000_cpu == PROCESSOR_PPC476 && flag_pic);
 
+  /* If the user has not specified -fuse-load-updates nor -fno-use-load-updates
+   * in 64-bit, default to -fuse-load-updates
+   */
+  if (flag_use_load_updates == -1 && TARGET_64BIT)
+    flag_use_load_updates = 1;
+
   return ret;
 }
 
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-10.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-10.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-10.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-10.c	2014-08-13 01:32:01.827015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m) {
+
+		s += 2;
+		m += 2;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-11.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-11.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-11.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-11.c	2014-08-13 01:32:01.827015000 -0500
@@ -0,0 +1,16 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 2;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "lbzu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-12.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-12.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-12.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-12.c	2014-08-13 01:32:01.827015000 -0500
@@ -0,0 +1,18 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 2;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-13.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-13.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-13.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-13.c	2014-08-13 01:32:01.827015000 -0500
@@ -0,0 +1,17 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 2;
+		m += 2;
+	}
+
+	baz(s, m, end);
+}
+
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-14.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-14.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-14.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-14.c	2014-08-13 01:32:01.827015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 2;
+		m += 2;
+	}
+
+	baz(s, m, end);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-15.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-15.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-15.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-15.c	2014-08-13 01:32:01.828015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *p, char *s);
+
+void foo(char *p, char *q, char *r, char *s)
+{
+        while (*p == *q && *p == *r && p < s) {
+
+		p += 2;
+		q += 2;
+		r += 2;
+	}
+
+	baz(p, s);
+}
+
+/* { dg-final { scan-assembler-times "addi" 0 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 3 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-16.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-16.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-16.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-16.c	2014-08-13 01:32:01.828015000 -0500
@@ -0,0 +1,20 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *p, char *s);
+
+void foo(char *p, char *q, char *r, char *s)
+{
+        while (*p == *q && *p == *r && p < s) {
+
+		p += 2;
+		q += 2;
+		r += 2;
+	}
+
+	baz(p, s);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 3 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-17.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-17.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-17.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-17.c	2014-08-13 01:32:01.828015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *p, char *s);
+
+void foo(char *p, char *q, char *r, char *s)
+{
+        while (*p == *q && *p == *r && p < s) {
+
+		p += 2;
+		q += 3;
+		r += 7;
+	}
+
+	baz(p, s);
+}
+
+/* { dg-final { scan-assembler-times "addi" 0 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 3 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-18.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-18.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-18.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-18.c	2014-08-13 01:32:01.828015000 -0500
@@ -0,0 +1,20 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *p, char *s);
+
+void foo(char *p, char *q, char *r, char *s)
+{
+        while (*p == *q && *p == *r && p < s) {
+
+		p += 2;
+		q += 3;
+		r += 7;
+	}
+
+	baz(p, s);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 3 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-19.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-19.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-19.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-19.c	2014-08-13 01:32:01.828015000 -0500
@@ -0,0 +1,21 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *p, char *s);
+
+void foo(char *p, char *q, char *r, char *s)
+{
+        while (*p && *q && *r && *s &&
+               *p == *q && *p == *r && *p == *s &&
+               *q == *r && *q == *s &&
+               *r == *s) {
+
+		p += 1;
+		q += 1;
+		r += 1;
+		s += 1;
+	}
+}
+
+/* { dg-final { scan-assembler-times "addi" 0 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 4 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-1.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-1.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-1.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-1.c	2014-08-13 01:32:01.828015000 -0500
@@ -0,0 +1,17 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 2;
+		m += 2;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-20.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-20.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-20.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-20.c	2014-08-13 01:32:01.828015000 -0500
@@ -0,0 +1,21 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *p, char *s);
+
+void foo(char *p, char *q, char *r, char *s)
+{
+        while (*p && *q && *r && *s &&
+               *p == *q && *p == *r && *p == *s &&
+               *q == *r && *q == *s &&
+               *r == *s) {
+
+		p += 1;
+		q += 1;
+		r += 1;
+		s += 1;
+	}
+}
+
+/* { dg-final { scan-assembler-times "addi" 0 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 4 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-21.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-21.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-21.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-21.c	2014-08-13 01:32:01.828015000 -0500
@@ -0,0 +1,17 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(int *s, int *m, int *end);
+
+void foo(int *s, int *m, int *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 1;
+		m += 1;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "lwzu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-22.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-22.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-22.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-22.c	2014-08-13 01:32:01.828015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(int *s, int *m, int *end);
+
+void foo(int *s, int *m, int *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 1;
+		m += 1;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lwzu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-23.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-23.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-23.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-23.c	2014-08-13 01:32:01.828015000 -0500
@@ -0,0 +1,17 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(int *s, int *m, int *end);
+
+void foo(int *s, int *m, int *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 3;
+		m += 3;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "lwzu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-24.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-24.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-24.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-24.c	2014-08-13 01:32:01.828015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(int *s, int *m, int *end);
+
+void foo(int *s, int *m, int *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 3;
+		m += 3;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lwzu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-25.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-25.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-25.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-25.c	2014-08-13 01:32:01.829015000 -0500
@@ -0,0 +1,20 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 2;
+		m += 2;
+
+		*s = 0;
+		*m = 0;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "stbu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-26.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-26.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-26.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-26.c	2014-08-13 01:32:01.829015000 -0500
@@ -0,0 +1,22 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 2;
+		m += 2;
+
+		*s = 0;
+		*m = 0;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stbu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-27.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-27.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-27.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-27.c	2014-08-13 01:32:01.829015000 -0500
@@ -0,0 +1,20 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *scan, char *match, char *strend);
+
+void foo(char *scan, char *match, char *strend)
+{
+        while (*scan == *match && scan > strend) {
+
+		scan  += -2;
+		match += -2;
+
+		*scan = 0;
+		*match = 0;
+	}
+
+	baz(scan, 0, strend);
+}
+
+/* { dg-final { scan-assembler-times "stbu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-28.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-28.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-28.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-28.c	2014-08-13 01:32:01.829015000 -0500
@@ -0,0 +1,22 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *scan, char *match, char *strend);
+
+void foo(char *scan, char *match, char *strend)
+{
+        while (*scan == *match && scan > strend) {
+
+		scan  += -2;
+		match += -2;
+
+		*scan = 0;
+		*match = 0;
+	}
+
+	baz(scan, 0, strend);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stbu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-29.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-29.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-29.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-29.c	2014-08-13 01:32:01.829015000 -0500
@@ -0,0 +1,17 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *strend);
+
+void foo(char *s, char *m, char *strend)
+{
+        while (*s == *m && s < strend) {
+
+		s += 2;
+		m -= 2;
+	}
+
+	baz(s, 0, strend);
+}
+
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-2.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-2.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-2.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-2.c	2014-08-13 01:32:01.829015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 2;
+		m += 2;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-30.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-30.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-30.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-30.c	2014-08-13 01:32:01.829015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *strend);
+
+void foo(char *s, char *m, char *strend)
+{
+        while (*s == *m && s < strend) {
+
+		s += 2;
+		m -= 2;
+	}
+
+	baz(s, 0, strend);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-31.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-31.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-31.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-31.c	2014-08-13 01:32:01.829015000 -0500
@@ -0,0 +1,20 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *scan, char *match, char *strend);
+
+void foo(char *scan, char *match, char *strend)
+{
+        while (*scan == *match && scan < strend) {
+
+		scan  += 1;
+		match += 1;
+
+		*scan = 0;
+		*match = 0;
+	}
+
+	baz(scan, 0, strend);
+}
+
+/* { dg-final { scan-assembler-times "stbu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-32.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-32.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-32.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-32.c	2014-08-13 01:32:01.829015000 -0500
@@ -0,0 +1,22 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *scan, char *match, char *strend);
+
+void foo(char *scan, char *match, char *strend)
+{
+        while (*scan == *match && scan < strend) {
+
+		scan  += 1;
+		match += 1;
+
+		*scan = 0;
+		*match = 0;
+	}
+
+	baz(scan, 0, strend);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stbu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-33.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-33.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-33.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-33.c	2014-08-13 01:32:01.829015000 -0500
@@ -0,0 +1,20 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *scan, char *match, char *strend);
+
+void foo(char *scan, char *match, char *strend)
+{
+        while (*scan == *match && scan > strend) {
+
+		scan  += -1;
+		match += -1;
+
+		*scan = 0;
+		*match = 0;
+	}
+
+	baz(scan, 0, strend);
+}
+
+/* { dg-final { scan-assembler-times "stbu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-34.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-34.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-34.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-34.c	2014-08-13 01:32:01.829015000 -0500
@@ -0,0 +1,22 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *scan, char *match, char *strend);
+
+void foo(char *scan, char *match, char *strend)
+{
+        while (*scan == *match && scan > strend) {
+
+		scan  += -1;
+		match += -1;
+
+		*scan = 0;
+		*match = 0;
+	}
+
+	baz(scan, 0, strend);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stbu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-35.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-35.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-35.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-35.c	2014-08-13 01:32:01.830015000 -0500
@@ -0,0 +1,22 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void foo (char *p, char *q, const char *bound);
+
+void incrBytes(char *p, char *q, const char *bound)
+{
+	while (*p == *q && p < bound) {
+
+		p += 1;
+		*p = *p + 1;
+
+		q += 1;
+		*q = *q+ 1;
+
+	}
+
+	foo (p, 0, bound);
+}
+
+/* { dg-final { scan-assembler-times "addi" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-36.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-36.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-36.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-36.c	2014-08-13 01:32:01.830015000 -0500
@@ -0,0 +1,23 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void foo (char *p, char *q, const char *bound);
+
+void incrBytes(char *p, char *q, const char *bound)
+{
+	while (*p == *q && p < bound) {
+
+		p += 1;
+		*p = *p + 1;
+
+		q += 1;
+		*q = *q+ 1;
+
+	}
+
+	foo (p, 0, bound);
+}
+
+/* { dg-final { scan-assembler-times "addi" 3 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-37.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-37.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-37.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-37.c	2014-08-13 01:32:01.830015000 -0500
@@ -0,0 +1,29 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+struct rx {
+ char **startp;
+};
+
+extern int *foo();
+
+int **bar(void)
+{
+ int **sp;
+ int iterations, i;
+ struct rx *rx;
+
+ for (i = i; i <= iterations; i++) {
+
+   ++sp;
+   *sp = foo();
+
+   if (rx->startp[i])
+     gorp();
+ }
+
+ return sp;
+}
+
+/* { dg-final { scan-assembler-times "addi" 3 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stwu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-38.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-38.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-38.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-38.c	2014-08-13 01:32:01.830015000 -0500
@@ -0,0 +1,29 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+struct rx {
+ char **startp;
+};
+
+extern int *foo();
+
+int **bar(void)
+{
+ int **sp;
+ int iterations, i;
+ struct rx *rx;
+
+ for (i = i; i <= iterations; i++) {
+
+   ++sp;
+   *sp = foo();
+
+   if (rx->startp[i])
+     gorp();
+ }
+
+ return sp;
+}
+
+/* { dg-final { scan-assembler-times "addi" 3 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-39.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-39.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-39.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-39.c	2014-08-13 01:32:01.830015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates -fno-builtin -fno-tree-loop-optimize" } */
+
+void *memset(void *b, int c, unsigned long len)
+{
+        unsigned long i;
+
+        for (i = 0; i < len; i++)
+                ((unsigned char *)b)[i] = c;
+
+        return b;
+}
+
+/* NOTE: We ought to get at-least one stwu - there is some vector related stuff that
+ *       we need to take into consideration under -fuse-load-updates. With plain
+ *       vanilla GCC, we do get one stwu, so we are actually degrading performance
+ *       by not taking the "vector stuff" into account. */
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-3.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-3.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-3.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-3.c	2014-08-13 01:32:01.830015000 -0500
@@ -0,0 +1,17 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 1;
+		m += 1;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-40.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-40.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-40.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-40.c	2014-08-13 01:32:01.830015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates -fno-builtin -fno-tree-loop-optimize" } */
+
+void *memset(void *b, int c, unsigned long len)
+{
+        unsigned long i;
+
+        for (i = 0; i < len; i++)
+                ((unsigned char *)b)[i] = c;
+
+        return b;
+}
+
+/* NOTE: We ought to get at-least one stwu - there is some vector related stuff that
+ *       we need to take into consideration under -fuse-load-updates. With plain
+ *       vanilla GCC, we do get one stwu, so we are actually degrading performance
+ *       by not taking the "vector stuff" into account. */
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-4.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-4.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-4.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-4.c	2014-08-13 01:32:01.830015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += 1;
+		m += 1;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-5.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-5.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-5.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-5.c	2014-08-13 01:32:01.830015000 -0500
@@ -0,0 +1,17 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += -1;
+		m += -1;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-6.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-6.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-6.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-6.c	2014-08-13 01:32:01.830015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += -1;
+		m += -1;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-7.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-7.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-7.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-7.c	2014-08-13 01:32:01.830015000 -0500
@@ -0,0 +1,17 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += -2;
+		m += -2;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-8.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-8.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-8.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-8.c	2014-08-13 01:32:01.831015000 -0500
@@ -0,0 +1,19 @@
+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m && s < end) {
+
+		s += -2;
+		m += -2;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "addi" 1 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
+/* { dg-final { scan-assembler-times "stdu" 1 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-9.c gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-9.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-9.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.9.1-pre-modify-disp-support/gcc/testsuite/gcc.dg/tree-ssa/fsl-use-load-updates-9.c	2014-08-13 01:32:01.831015000 -0500
@@ -0,0 +1,17 @@
+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */
+/* { dg-options "-O3 -fuse-load-updates" } */
+
+extern void baz(char *s, char *m, char *end);
+
+void foo(char *s, char *m, char *end)
+{
+        while (*s == *m) {
+
+		s += 2;
+		m += 2;
+	}
+
+	baz(s, 0, end);
+}
+
+/* { dg-final { scan-assembler-times "lbzu" 2 { target powerpc*-*-* } } } */
diff -Naur gcc-4.9.1/gcc/tree-ssa-loop-ivopts.c gcc-4.9.1-pre-modify-disp-support/gcc/tree-ssa-loop-ivopts.c
--- gcc-4.9.1/gcc/tree-ssa-loop-ivopts.c	2014-08-13 01:25:45.343015000 -0500
+++ gcc-4.9.1-pre-modify-disp-support/gcc/tree-ssa-loop-ivopts.c	2014-08-13 01:30:08.599015000 -0500
@@ -2390,6 +2390,8 @@
   return false;
 }
 
+#define WANT_LOAD_UPDATES (flag_use_load_updates == 1)
+
 /* If possible, adds autoincrement candidates BASE + STEP * i based on use USE.
    Important field is set to IMPORTANT.  */
 
@@ -2419,7 +2421,10 @@
        && GET_MODE_SIZE (mem_mode) == cstepi)
       || ((USE_LOAD_PRE_DECREMENT (mem_mode)
 	   || USE_STORE_PRE_DECREMENT (mem_mode))
-	  && GET_MODE_SIZE (mem_mode) == -cstepi))
+	  && GET_MODE_SIZE (mem_mode) == -cstepi)
+      || (WANT_LOAD_UPDATES && HAVE_PRE_MODIFY_DISP
+	  && (GET_MODE_SIZE (mem_mode) != 0
+	      && cstepi % GET_MODE_SIZE (mem_mode) == 0)))
     {
       enum tree_code code = MINUS_EXPR;
       tree new_base;
@@ -3213,6 +3218,7 @@
 {
   AINC_PRE_INC,		/* Pre increment.  */
   AINC_PRE_DEC,		/* Pre decrement.  */
+  AINC_PRE_MOD,		/* Pre Modify */
   AINC_POST_INC,	/* Post increment.  */
   AINC_POST_DEC,	/* Post decrement.  */
   AINC_NONE		/* Also the number of auto increment types.  */
@@ -3239,6 +3245,7 @@
   address_cost_data data;
   static bool has_preinc[MAX_MACHINE_MODE], has_postinc[MAX_MACHINE_MODE];
   static bool has_predec[MAX_MACHINE_MODE], has_postdec[MAX_MACHINE_MODE];
+  static bool has_premod_d[MAX_MACHINE_MODE];
   unsigned cost, acost, complexity;
   enum ainc_type autoinc_type;
   bool offset_p, ratio_p, autoinc;
@@ -3356,6 +3363,14 @@
 	    data->ainc_costs[AINC_POST_INC]
 	      = address_cost (addr, mem_mode, as, speed);
 	}
+      if (WANT_LOAD_UPDATES && HAVE_PRE_MODIFY_DISP)
+	{
+	  addr = gen_rtx_PRE_MODIFY (address_mode, reg0,
+	                             gen_rtx_PLUS (address_mode, reg0,
+	                                           GEN_INT (cstep)));
+	  has_premod_d[mem_mode]
+	    = memory_address_addr_space_p (mem_mode, addr, as);
+	}
       for (i = 0; i < 16; i++)
 	{
 	  sym_p = i & 1;
@@ -3464,7 +3479,8 @@
 	      fprintf (dump_file, "index costs %d\n", acost);
 	    }
 	  if (has_predec[mem_mode] || has_postdec[mem_mode]
-	      || has_preinc[mem_mode] || has_postinc[mem_mode])
+	      || has_preinc[mem_mode] || has_postinc[mem_mode]
+	      || (WANT_LOAD_UPDATES && has_premod_d[mem_mode]))
 	    fprintf (dump_file, "  May include autoinc/dec\n");
 	  fprintf (dump_file, "\n");
 	}
@@ -3501,6 +3517,11 @@
       else if (has_predec[mem_mode] && autoinc_offset == -msize
 	       && msize == -cstep)
 	autoinc_type = AINC_PRE_DEC;
+      else if (WANT_LOAD_UPDATES && has_premod_d[mem_mode]
+               && msize != 0
+               && autoinc_offset % msize == 0
+               && cstep % msize == 0)
+	autoinc_type = AINC_PRE_MOD;
 
       if (autoinc_type != AINC_NONE)
 	autoinc = true;
@@ -3521,7 +3542,7 @@
 
   if (may_autoinc)
     *may_autoinc = autoinc;
-  if (autoinc)
+  if (autoinc && (autoinc_type != AINC_PRE_MOD))
     acost = data->ainc_costs[autoinc_type];
   else
     acost = data->costs[symbol_present][var_present][offset_p][ratio_p];
