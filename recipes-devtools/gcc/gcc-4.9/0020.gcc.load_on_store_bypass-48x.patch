# Problem Statement
 This patch implements option -fbypass-load-on-store

 A load on store collision causes the load to to be replayed if the store has not completed.
 Under -fbypass-load-on-store, GCC will attempt to avoid a load on store collision by trying
 to space the load away from the store by scheduling upto 14 instructions in between, to
 prevent the load from executing too early.

# Owned by:
  Russo John

# Action:

 * -fbypass-load-on-store is enabled under -fschedule-insns
 * Cores supported: e5500, e6500, e500mc
 * Ref: Load-on-Store Collision Avoidance by Software Stall of Load. James Yang. May 18, 2010

 Rev2:
 * Scheduler is switched off at -O0. Re-work the test case.

diff -Naur gcc-4.8.3/gcc/common.opt gcc-4.8.3-load-on-store-bypass/gcc/common.opt
--- gcc-4.8.3/gcc/common.opt	2013-03-14 04:13:36.000000000 -0500
+++ gcc-4.8.3-load-on-store-bypass/gcc/common.opt	2014-09-12 05:06:22.086156403 -0500
@@ -889,6 +889,10 @@
 Common Report Var(flag_btr_bb_exclusive) Optimization
 Restrict target load migration not to re-use registers in any basic block
 
+fbypass-load-on-store
+Common Report Var(flag_bypass_load_on_store) Optimization
+Bypass load on store collision
+
 fcall-saved-
 Common Joined RejectNegative Var(common_deferred_options) Defer
 -fcall-saved-<register>	Mark <register> as being preserved across functions
diff -Naur gcc-4.8.3/gcc/config/rs6000/e500mc64.md gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/e500mc64.md
--- gcc-4.8.3/gcc/config/rs6000/e500mc64.md	2013-01-10 14:38:27.000000000 -0600
+++ gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/e500mc64.md	2014-09-12 05:06:22.087156402 -0500
@@ -189,3 +189,5 @@
   (and (eq_attr "type" "ddiv")
        (eq_attr "cpu" "ppce500mc64"))
   "e500mc64_decode,e500mc64_issue+e500mc64_fpu,e500mc64_fpu*34")
+
+(define_bypass 15 "e500mc64_store" "e500mc64_load" "rs6000_bypass_load_on_store_collision_p")
diff -Naur gcc-4.8.3/gcc/config/rs6000/e500mc.md gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/e500mc.md
--- gcc-4.8.3/gcc/config/rs6000/e500mc.md	2013-01-10 14:38:27.000000000 -0600
+++ gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/e500mc.md	2014-09-12 05:06:22.088156403 -0500
@@ -198,3 +198,5 @@
   (and (eq_attr "type" "ddiv")
        (eq_attr "cpu" "ppce500mc"))
   "e500mc_decode,e500mc_issue+e500mc_fpu,e500mc_fpu*65")
+
+(define_bypass 15 "e500mc_store" "e500mc_load" "rs6000_bypass_load_on_store_collision_p")
diff -Naur gcc-4.8.3/gcc/config/rs6000/e5500.md gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/e5500.md
--- gcc-4.8.3/gcc/config/rs6000/e5500.md	2013-01-10 14:38:27.000000000 -0600
+++ gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/e5500.md	2014-09-12 05:06:22.088156403 -0500
@@ -174,3 +174,5 @@
   (and (eq_attr "type" "cr_logical,delayed_cr")
        (eq_attr "cpu" "ppce5500"))
   "e5500_decode,e5500_bu")
+
+(define_bypass 15 "e5500_store" "e5500_load" "rs6000_bypass_load_on_store_collision_p")
diff -Naur gcc-4.8.3/gcc/config/rs6000/e6500.md gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/e6500.md
--- gcc-4.8.3/gcc/config/rs6000/e6500.md	2013-01-10 14:38:27.000000000 -0600
+++ gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/e6500.md	2014-09-12 05:06:22.089156405 -0500
@@ -211,3 +211,5 @@
   (and (eq_attr "type" "vecperm")
        (eq_attr "cpu" "ppce6500"))
   "e6500_decode,e6500_vecperm")
+
+(define_bypass 15 "e6500_store" "e6500_load" "rs6000_bypass_load_on_store_collision_p")
diff -Naur gcc-4.8.3/gcc/config/rs6000/rs6000.c gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/rs6000.c
--- gcc-4.8.3/gcc/config/rs6000/rs6000.c	2014-05-04 21:18:35.000000000 -0500
+++ gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/rs6000.c	2014-09-12 05:06:22.092156403 -0500
@@ -33045,3 +33045,20 @@
 struct gcc_target targetm = TARGET_INITIALIZER;
 
 #include "gt-rs6000.h"
+
+bool
+rs6000_bypass_load_on_store_collision_p (rtx out_insn, rtx in_insn)
+{
+  /* The out_insn is a store and the in_insn is a load */
+  if (flag_bypass_load_on_store &&
+      (GET_CODE (PATTERN (out_insn)) == SET &&
+       GET_CODE (SET_DEST (PATTERN (out_insn))) == MEM &&
+       GET_CODE (SET_SRC (PATTERN (out_insn))) == REG) &&
+      (GET_CODE (PATTERN (in_insn)) == SET &&
+       GET_CODE (SET_DEST (PATTERN (in_insn))) == REG &&
+       GET_CODE (SET_SRC (PATTERN (in_insn))) == MEM))
+    return rtx_equal_p (SET_DEST (PATTERN (out_insn)),
+                        SET_SRC  (PATTERN (in_insn)));
+  else
+    return false;
+}
diff -Naur gcc-4.8.3/gcc/config/rs6000/rs6000-protos.h gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/rs6000-protos.h
--- gcc-4.8.3/gcc/config/rs6000/rs6000-protos.h	2014-04-04 10:10:24.000000000 -0500
+++ gcc-4.8.3-load-on-store-bypass/gcc/config/rs6000/rs6000-protos.h	2014-09-12 05:06:22.092156403 -0500
@@ -193,6 +193,8 @@
 extern bool rs6000_overloaded_builtin_p (enum rs6000_builtins);
 extern HOST_WIDE_INT rs6000_builtin_mask_calculate (void);
 
+extern bool rs6000_bypass_load_on_store_collision_p (rtx out_insn, rtx in_insn);
+
 /* Declare functions in rs6000-c.c */
 
 extern void rs6000_pragma_longcall (struct cpp_reader *);
diff -Naur gcc-4.8.3/gcc/testsuite/gcc.target/powerpc/bypass-load-on-store.c gcc-4.8.3-load-on-store-bypass/gcc/testsuite/gcc.target/powerpc/bypass-load-on-store.c
--- gcc-4.8.3/gcc/testsuite/gcc.target/powerpc/bypass-load-on-store.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.8.3-load-on-store-bypass/gcc/testsuite/gcc.target/powerpc/bypass-load-on-store.c	2014-09-13 08:41:43.089145373 -0500
@@ -0,0 +1,27 @@
+/* { dg-do compile { target { powerpc*-*-* } } } */
+/* { dg-skip-if "" { powerpc*-*-*spe* } { "*" } { "" } } */
+/* { dg-options "-O3 -fbypass-load-on-store -fdump-rtl-sched1 -fdump-rtl-sched2 -fsched-verbose=2" } */
+
+void nescaf(void)
+{
+
+	extern long a, b, c, d, e, f;
+	volatile long z, w;
+
+	a = 41; b = 79; c = 20; d = 11; e = 12; f = 100;
+
+	/* Now, we have a store followed by a load. The assignments to a-t are
+	 * all independent of the store-load computation below. The question is:
+	 * Under -fschedule-insns -fbypass-load-on-store, are 14 of the above
+	 * instructions moved between the store-load?
+	 */
+	z = 121;
+	w = z;
+}
+
+/* Note: There is going to be exactly one insn that will be assigned cost 15.
+ *       Since its insn-number will likely change, we do not include the insn
+ *       number in the scan - just the part of the dump that'll be invariant.
+ */
+/* { dg-final { scan-rtl-dump "into queue with cost=15" "sched1" { target powerpc*-*-* } } } */
+/* { dg-final { cleanup-rtl-dump "sched*" } } */
