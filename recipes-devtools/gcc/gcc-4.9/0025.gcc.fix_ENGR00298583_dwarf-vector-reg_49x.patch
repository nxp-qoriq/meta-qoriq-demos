# Problem Statement:
  In Altivec targets (e.g. e6500), DWARF vector register indices for DW_OP_regx
  locations are not in range. According to "64-bit PowerPC ELF Application
  Binary Interface Supplement 1.9", DWARF Register Number Mapping section, the
  expected range for vector registers is:
                 Vector Registers 0-31 1124-1155 vr0-vr31.

  However, the compiler generates indices in the 77-108 range that overlap with
  other defined mappings.

# Reported by:
  Doan Vu Van

# Owned by:
  Rohit

# Action:
  While mapping gcc register numbers to DWARF2 register numbers,
  we digress a bit from the standard ABI.
  http://gcc.gnu.org/ml/gcc-patches/2012-11/msg02136.html

  The above change is handled by GDB, but CodeWarrior PowerPC debugger
  stricity follows the ABI especially while mapping the vector registers.

  We have provided an compiler option, '-mmap_dwarf_vecreg' so that the user can
  generate the dwarf register indexes for vector registers as per standard.

diff -Naur gcc-4.9.2/gcc/config/rs6000/rs6000.c gcc-4.9.2-dbx-vector-reg/gcc/config/rs6000/rs6000.c
--- gcc-4.9.2/gcc/config/rs6000/rs6000.c	2014-10-12 21:33:20.000000000 -0500
+++ gcc-4.9.2-dbx-vector-reg/gcc/config/rs6000/rs6000.c	2014-11-06 09:32:31.609217000 -0600
@@ -31304,6 +31304,22 @@
   return regno;
 }
 
+/* While mapping gcc register numbers to DWARF2 register numbers, 
+ * we digress a bit from the standard ABI.
+ * http://gcc.gnu.org/ml/gcc-patches/2012-11/msg02136.html
+ *
+ * The above change is handled by GDB, but CodeWarrior PowerPC debugger
+ * stricity follows the ABI especially while mapping the vector registers */
+
+unsigned int
+rs6000_fsl_dbx_register_number (unsigned int regno)
+{
+  if (global_options_set.x_rs6000_map_dwarf_vec_reg)
+    return rs6000_dbx_register_number (regno);
+
+  return regno;
+}
+
 /* target hook eh_return_filter_mode */
 static enum machine_mode
 rs6000_eh_return_filter_mode (void)
diff -Naur gcc-4.9.2/gcc/config/rs6000/rs6000.opt gcc-4.9.2-dbx-vector-reg/gcc/config/rs6000/rs6000.opt
--- gcc-4.9.2/gcc/config/rs6000/rs6000.opt	2014-01-23 19:56:48.000000000 -0600
+++ gcc-4.9.2-dbx-vector-reg/gcc/config/rs6000/rs6000.opt	2014-11-06 09:32:31.610217000 -0600
@@ -361,6 +361,10 @@
 Target RejectNegative Joined
 -mdebug=	Enable debug output
 
+mmap_dwarf_vecreg
+Target RejectNegative Var(rs6000_map_dwarf_vec_reg, 0) Save
+Generate expected DWARF Register Number Mapping for Vector Registers 
+
 mabi=altivec
 Target RejectNegative Var(rs6000_altivec_abi) Save
 Use the AltiVec ABI extensions
diff -Naur gcc-4.9.2/gcc/config/rs6000/rs6000-protos.h gcc-4.9.2-dbx-vector-reg/gcc/config/rs6000/rs6000-protos.h
--- gcc-4.9.2/gcc/config/rs6000/rs6000-protos.h	2014-09-19 15:59:51.000000000 -0500
+++ gcc-4.9.2-dbx-vector-reg/gcc/config/rs6000/rs6000-protos.h	2014-11-06 09:32:31.610217000 -0600
@@ -186,6 +186,7 @@
 extern void rs6000_emit_prologue (void);
 extern void rs6000_emit_load_toc_table (int);
 extern unsigned int rs6000_dbx_register_number (unsigned int);
+extern unsigned int rs6000_fsl_dbx_register_number (unsigned int);
 extern void rs6000_emit_epilogue (int);
 extern void rs6000_emit_eh_reg_restore (rtx, rtx);
 extern const char * output_isel (rtx *);
diff -Naur gcc-4.9.2/gcc/config/rs6000/sysv4.h gcc-4.9.2-dbx-vector-reg/gcc/config/rs6000/sysv4.h
--- gcc-4.9.2/gcc/config/rs6000/sysv4.h	2014-07-24 12:25:19.000000000 -0500
+++ gcc-4.9.2-dbx-vector-reg/gcc/config/rs6000/sysv4.h	2014-11-06 09:33:45.296217000 -0600
@@ -948,7 +948,8 @@
 /* This target uses the sysv4.opt file.  */
 #define TARGET_USES_SYSV4_OPT 1
 
-#undef DBX_REGISTER_NUMBER
+/* Use standard DWARF numbering for DWARF debugging information.  */
+#define DBX_REGISTER_NUMBER(REGNO) rs6000_fsl_dbx_register_number (REGNO)
 
 /* Link -lasan early on the command line.  For -static-libasan, don't link
    it for -shared link, the executable should be compiled with -static-libasan
diff -Naur gcc-4.8.3/gcc/testsuite/gcc.target/powerpc/ppc-fsl-altivec-dwreg.c gcc-4.8.3-patch/gcc/testsuite/gcc.target/powerpc/ppc-fsl-altivec-dwreg.c
--- gcc-4.8.3/gcc/testsuite/gcc.target/powerpc/ppc-fsl-altivec-dwreg.c	1969-12-31 18:00:00.000000000 -0600
+++ gcc-4.8.3-patch/gcc/testsuite/gcc.target/powerpc/ppc-fsl-altivec-dwreg.c	2014-12-05 04:11:26.299670000 -0600
@@ -0,0 +1,18 @@
+/* { dg-do compile { target { powerpc*-*-* } } } */
+/* { dg-require-effective-target powerpc_altivec_ok } */
+/* { dg-options "-O0 -g -mmap_dwarf_vecreg" } */
+/* { dg-final { scan-assembler-times ".uleb128 0x481" 1 } } */
+/* { dg-final { scan-assembler-times ".uleb128 0x482" 1 } } */
+/* { dg-final { scan-assembler-times ".uleb128 0x483" 1 } } */
+
+#include <altivec.h>
+
+vector unsigned int fun()
+{
+  register vector unsigned int vi1 = {0,1,2,3}; 
+  register vector unsigned int vi2 = {1,2,3,4};
+  register vector unsigned int ri = {0,0,0,0};
+  ri = vec_add(vi1, vi2); /* ri = vi1 + vi2 */
+
+  return ri;
+}
