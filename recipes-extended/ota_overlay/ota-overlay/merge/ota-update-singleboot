#!/bin/bash

. /data/config.env

dd if=/dev/mmcblk0 of=/tmp/ota-info bs=512 skip=129024 count=1
updateStatus=`cat /tmp/ota-info | awk '{print $1}'`
oldimageVersion=`cat /tmp/ota-info | awk '{print $3}'`
sdplatform=`cat /tmp/ota-info | awk '{print $2}'`
newimageVersion=`cat /tmp/ota-info | awk '{print $4}'`
solutionname=`cat /tmp/ota-info | awk '{print $5}'`
solutionid=`cat /tmp/ota-info | awk '{print $6}'`
autoOta=`cat /tmp/ota-info | awk '{print $7}'`
mid=`cat /tmp/ota-info | awk '{print $8}'`
deviceid=$ES_DEVICEID
platform=$(echo $deviceid | awk -F . '{print $4}')
boardname=$platform"rdb"
bootimageVersion=`cat /usr/local/edgescale/conf/edgescale-version | awk -F '-' '{print $2}'`
devpartname=mmcblk0p
bootsource=qspi

if [ "$platform"x == x ];then
	echo "there is no platform information"
        exit 1
fi

if [ "$sdplatform"x != "$platform"x ];then
	updateStatus=1
	oldimageVersion=0
fi

echo "$platform"
if [ "$platform"x == "ls2088ardb"x ];then
	bootsource=nor
elif [ "$platform"x == "ls1043ardb"x ];then
	bootsource=nor
elif [ "$platform"x == "ls1028ardb"x ];then
	bootsource=flexspi
elif [ "$platform"x == "lx2160ardb"x ];then
	bootsource=flexspi
elif [ "$platform"x == "ls1012afrwy"x ];then
	bootsource=qspi_2
elif [ "$platform"x == "ls1012ardb"x ];then
	bootsource=qspi_1
else
	bootsource=qspi
fi

echo "updateStatus="$updateStatus
echo "oldimageVersion="$oldimageVersion
echo "bootimageVersion="$bootimageVersion
get_imageURL(){
	api_result=`curl -H "Accept: application/json; version=$version" -H "access-token: $(cat /data/.edgescale.cred)" "$ES_API_URI/devices/softwares?device_id=$deviceid&solution=$solutionname&version=$imageVersion"`
	imageURL=`echo $api_result | grep url | sed 's/\"//g' | sed 's/.*url:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	solutionid=`echo $api_result | grep sol_id | sed 's/\"//g' | sed 's/.*sol_id:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	have_installer=`echo $api_result | grep have_installer | sed 's/\"//g' | sed 's/.*have_installer:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	is_signed=`echo $api_result | grep is_signed | sed 's/\"//g' | sed 's/.*is_signed:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	public_key=`echo $api_result | grep public_key | sed 's/\"//g' | sed 's/.*public_key:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
}

get_newimageVersion(){
	api_result=`curl -H "Accept: application/json; version=$version" -H "access-token: $(cat /data/.edgescale.cred)" "$ES_API_URI/devices/softwares?device_id=$deviceid&version=$bootimageVersion"`
	imageURL=`echo $api_result | grep url | sed 's/\"//g' | sed 's/.*url:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	newimageVersion=`echo $api_result | grep version | sed 's/\"//g' | sed 's/.*version:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	solutionname=`echo $api_result | grep solution | sed 's/\"//g' | sed 's/.*solution:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	solutionid=`echo $api_result | grep sol_id | sed 's/\"//g' | sed 's/.*sol_id:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	is_signed=`echo $api_result | grep is_signed | sed 's/\"//g' | sed 's/.*is_signed:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	public_key=`echo $api_result | grep public_key | sed 's/\"//g' | sed 's/.*public_key:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	if [ "$imageURL"x == x ];then
		echo "request version of image failed from server"
		exit 1
	fi
}

feedback_status(){
	if [ $autoOta -eq 0 ];then
		curl -X POST -H "Content-Type: application/json; version=$version" -H "access-token: $(cat /data/.edgescale.cred)" $ES_API_URI/devices/tasks/status -d '{"device":"'$deviceid'", "mid":"'$mid'", "status":"'"$1"'"}'
	fi
}

security_check(){
	if [ "true"x = "$is_signed"x ]; then
		result=`echo $public_key > /tmp/rsa.base`
		result=`cat /tmp/rsa.base | base64 -d > /tmp/rsa.pub`
		# Using public key verify OEM images(firmware, bootpartition and rootfs)
		result=`openssl dgst -md5 -verify /tmp/rsa.pub -signature ./sign/$firmware_file.sign $firmware_file`
		firmware_status=`echo $result | awk '{print $2}'`
		result=`openssl dgst -md5 -verify /tmp/rsa.pub -signature ./sign/$boot_file.sign $boot_file`
		boot_status=`echo $result | awk '{print $2}'`
		result=`openssl dgst -md5 -verify /tmp/rsa.pub -signature ./sign/$rootfs_file.sign $rootfs_file`
		rootfs_status=`echo $result | awk '{print $2}'`
		verify_status="OK"
		if [ "Failure"x = "$firmware_status"x ]; then
			verify_status="Failure"
		elif [ "Failure"x = "$boot_status"x ]; then
			verify_status="Failure"
		elif [ "Failure"x = "$rootfs_status"x ]; then
			verify_status="Failure"
		fi

		if [ "OK"x = "$verify_status"x ]; then
			echo "The solution image: "$result
			echo "Atfer will Deploying image."
		else
			echo "The solution image: "$result "Please Checking this image!"
			echo "The system will restart after 6 seconds."
			sleep 6
			reboot -f
		fi
	else
		echo "OEM signature not found in this solution"
	fi
}

setup_ima_evm(){
        if [ -f "/usr/bin/sec_imaevm" ]; then
            /usr/bin/sec_imaevm
        fi
}

download_images(){
	download_path=/run/media/mmcblk0p3/updateImages
	if [ ! -d ${download_path} ];then
		mkdir -p ${download_path}
	fi
	wget -O ${download_path}/full_images_default.tgz -c $imageURL -t 0 -T 300
	if [ $? != 0 ];then
		echo "Connection timeout"
		sleep 5
		reboot -f
	else
		return 0
	fi
}

check_disk_capacity() {
    devname=mmcblk0
    disksize=$[ `fdisk -ls /dev/$devname` / 1000000 ]
    if [ $disksize -ge 15 ] ; then
	echo "/dev/$devname: $disksize GB"
    else
	echo "The capacity of /dev/$devname $disksize GB is not enough, 16 GB or above is recommended"
	exit
    fi
}

umount_device() {
    if cat /proc/mounts | grep $devpartname; then
	umount /dev/${devpartname}* 2>/dev/null || true 1>/dev/null 2>&1
    fi
}

mount_device() {
    efipartnum=1;bootpartnum=2;backuppartnum=3;syspartnum=4
    for i in $efipartnum $bootpartnum $backuppartnum $syspartnum; do
        if [ ! -d /run/media/${devpartname}$i ];then
             mkdir -p /run/media/${devpartname}$i
        fi
        if ! mount | grep ${devpartname}$i; then
             mount -t ext4 /dev/${devpartname}$i /run/media/${devpartname}$i 1>/dev/null 2>&1
        fi
    done
}

sd_card_format(){
	check_disk_capacity
	flex-installer -i pf -d sd -p 4P=100M:1G:$[($disksize - 2) * 2 / 3]G:-1
	if [ ! -d "/run/media/mmcblk0p3" ];then
		echo "partition of SD card is not right"
		exit 1
	fi
}

partition_format(){
    bootpartnum=2
    syspartnum=4

    echo "Formatting partitions ..."

    umount_device
    mkfs.ext4 -F -q -b 4096 -L boot -O ^64bit,^metadata_csum /dev/${devpartname}$bootpartnum
    umount_device
    mkfs.ext4 -F -q -O ^huge_file,^64bit,^metadata_csum -b 4096 -L system /dev/${devpartname}$syspartnum
    mount_device

    echo "partition and format ${devpartname}"

}

install_images(){
	download_path=/run/media/mmcblk0p3/updateImages
	docker_path=/run/media/mmcblk0p3/docker
	if [ ! -d ${docker_path} ];then
		mkdir -p ${docker_path}
	fi
	cd ${download_path}
	if [ "$updateStatus"x == 4x ];then
		tar -xf full_images_deploy.tgz
	elif [ "$updateStatus"x == 2x ];then
		if [ -e full_images_deploy_old.tgz ];then
			mv full_images_deploy_old.tgz full_images_deploy.tgz
			tar -xf full_images_deploy.tgz
		elif [ -e full_images_deploy.tgz ];then
			rm full_images_deploy.tgz
			tar -xf full_images_default.tgz
		else
			tar -xf full_images_default.tgz
		fi
	else
		tar -xf full_images_default.tgz
	fi
	if [ ! -f "install.sh" ];then
		firmware_file=`ls *firmware*.img`
		boot_file=`ls *boot*.tgz`
		rootfs_file=`ls *rootfs*.tgz`
		if [ ! -f "$firmware_file" ];then
			echo "get firmware image error"
			reboot
		fi
		if [ ! -f "$boot_file" ];then
			echo "get boot image error"
			reboot
		fi
		if [ ! -f "$rootfs_file" ];then
			echo "get rootfs image error"
			reboot
		fi
		security_check
		feedback_status "ota-install"
		if [ "$bootsource"x == "qspi"x ]; then
			echo "qspi boot"
			firmware_size=`ls -al $firmware_file | awk '{print $5}'`
			mtd_debug erase /dev/mtd1 0 0x1000000
			mtd_debug write /dev/mtd1 0 0x1000000 $firmware_file
		elif [ "$bootsource"x == "qspi_1"x ]; then
			echo "qspi boot 1"
			firmware_size=`ls -al $firmware_file | awk '{print $5}'`
			mtd_debug erase /dev/mtd0 0 0x1000000
			mtd_debug write /dev/mtd0 0 0x1000000 $firmware_file
		elif [ "$bootsource"x == "qspi_2"x ]; then
			echo "qspi boot 2"
			firmware_size=`ls -al $firmware_file | awk '{print $5}'`
			mtd_debug erase /dev/mtd0 0 0x200000
			mtd_debug write /dev/mtd0 0 $firmware_size $firmware_file
		elif [ "$bootsource"x == "flexspi"x ]; then
			echo "flexspi boot"
			firmware_size=`ls -al $firmware_file | awk '{print $5}'`
			mtd_debug erase /dev/mtd0 0 0x1000000
			mtd_debug write /dev/mtd0 0 0x1000000 $firmware_file
		elif [ "$bootsource"x == "nor"x ]; then
			echo "nor boot"
			firmware_size=`ls -al $firmware_file | awk '{print $5}'`
			mtd_debug erase /dev/mtd0 0 0x1000000
			mtd_debug write /dev/mtd0 0 0x1000000 $firmware_file
		else
			flex-installer --firmware=$firmware_file --startblock=8 --device=/dev/mmcblk0
		fi
		flex-installer -i install --bootpart=$boot_file --rootfs=$rootfs_file --machine=$boardname --device=sd
		setup_ima_evm
	else
		chmod +x ${download_path}/install.sh
		${download_path}/install.sh
		if [ $? != 0 ];then
			reboot
		fi
	fi
	ls | grep -v 'full_images_default*' | grep -v 'full_images_deploy*' | xargs rm -rf
	cd ~/
	umount_device
}

update_images(){
	download_path=/run/media/mmcblk0p3/updateImages
	docker_path=/run/media/mmcblk0p3/docker
	if [ ! -d ${download_path} ];then
		mkdir -p ${download_path}
	fi
	if [ ! -d ${docker_path} ];then
		mkdir -p ${docker_path}
	fi
	if [ "true"x = "$have_installer"x ];then
		tar -xf ${download_path}/full_images_deploy.tgz -C ${download_path}
		chmod +x ${download_path}/install.sh
		${download_path}/install.sh
		if [ $? != 0 ];then
			find ${download_path}/* | grep -v 'full_image_default*' | xargs rm -rf {}
			reboot
		fi
		umount_device
	else
		install_images
	fi
}

if [ "$updateStatus"x == 3x -a $oldimageVersion != 0 ];then
	echo "Now need rollback the image version=$oldimageVersion"
	feedback_status "ota-rollback"
	imageVersion=$oldimageVersion
	get_imageURL
	updateStatus=1
	sd_card_format
	download_images
	install_images
	echo "$updateStatus $platform $oldimageVersion $imageVersion $solutionname $solutionid $autoOta $mid" > /tmp/ota-info
	dd if=/tmp/ota-info of=/dev/mmcblk0 bs=512 seek=129024 count=1 conv=sync
elif [ "$updateStatus"x == 2x -a $oldimageVersion != 0 ];then
	echo "Now need rollback the last working image version=$oldimageVersion"
	feedback_status "ota-rollback"
	imageVersion=$oldimageVersion
	partition_format
	install_images
	updateStatus=1
	echo "$updateStatus $platform $oldimageVersion $imageVersion $solutionname $solutionid $autoOta $mid" > /tmp/ota-info
	dd if=/tmp/ota-info of=/dev/mmcblk0 bs=512 seek=129024 count=1 conv=sync
elif [ "$updateStatus"x == 4x ];then
	echo "Now need update the image to version=$newimageVersion"
	imageVersion=$newimageVersion
	partition_format
	update_images
	updateStatus=1
	echo "$updateStatus $platform $oldimageVersion $imageVersion $solutionname $solutionid $autoOta $mid" > /tmp/ota-info
	dd if=/tmp/ota-info of=/dev/mmcblk0 bs=512 seek=129024 count=1 conv=sync
else
	echo "now will check the newest image and update it."
	autoOta=1
	get_newimageVersion
	if [ $newimageVersion \> $oldimageVersion ];then
		imageVersion=$newimageVersion
		updateStatus=1
		sd_card_format
		download_images
		install_images
		echo "$updateStatus $platform $oldimageVersion $imageVersion $solutionname $solutionid $autoOta $mid" > /tmp/ota-info
		dd if=/tmp/ota-info of=/dev/mmcblk0 bs=512 seek=129024 count=1 conv=sync
	else
		updateStatus=1
		echo "$updateStatus $platform $oldimageVersion $oldimageVersion $solutionname $solutionid $autoOta $mid" > /tmp/ota-info
		dd if=/tmp/ota-info of=/dev/mmcblk0 bs=512 seek=129024 count=1 conv=sync
	fi
fi
	feedback_status "ota-reboot"
reboot -f
